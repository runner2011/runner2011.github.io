"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[9965],{628:(e,i)=>{i.A=(e,i)=>{const n=e.__vccOpts||e;for(const[e,a]of i)n[e]=a;return n}},9912:(e,i,n)=>{n.r(i),n.d(i,{comp:()=>s,data:()=>r});var a=n(8178);const t=n.p+"assets/img/VS_build_config.145b81c0.png",l={},s=(0,n(628).A)(l,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,[i[0]||(i[0]=(0,a.Fv)('<h1 id="vscode手动构建c-项目" tabindex="-1"><a class="header-anchor" href="#vscode手动构建c-项目"><span>VSCode手动构建C++项目</span></a></h1><h2 id="c-项目构建简介" tabindex="-1"><a class="header-anchor" href="#c-项目构建简介"><span>C++项目构建简介</span></a></h2><ul><li>cmake</li><li>make</li><li>ninja</li><li>集成开发环境（VisualStudio）</li><li>vscode</li></ul><h2 id="预编译include配置" tabindex="-1"><a class="header-anchor" href="#预编译include配置"><span>预编译Include配置</span></a></h2><p>TODO</p>',5)),(0,a.Q3)(" 这是一个注释，不会在渲染后的页面中显示 ![SS](/src/Resources/Programming/VS_build_config.png) "),i[1]||(i[1]=(0,a.Fv)('<figure><img src="'+t+'" alt="Visual Studio的实现方式" tabindex="0" loading="lazy"><figcaption>Visual Studio的实现方式</figcaption></figure><h2 id="link配置" tabindex="-1"><a class="header-anchor" href="#link配置"><span>Link配置</span></a></h2><p>TODO</p><h2 id="题外-for-unreal-engine-user-unreal-engine-构建" tabindex="-1"><a class="header-anchor" href="#题外-for-unreal-engine-user-unreal-engine-构建"><span>题外（For Unreal Engine user），Unreal Engine 构建</span></a></h2><ul><li>UBT</li><li>基于Module构建</li><li>填写Public Include和Private Include. Public Include相当于提供了Module的API。</li><li>模块文件夹下的所有cpp文件自动递归扫描全部加入编译</li></ul><h3 id="q-为什么要手动填写include-而cpp文件自动全部添加编译" tabindex="-1"><a class="header-anchor" href="#q-为什么要手动填写include-而cpp文件自动全部添加编译"><span>Q: 为什么要手动填写Include，而cpp文件自动全部添加编译</span></a></h3><p>因为cpp的编译机制决定的</p><ul><li>在 C++ 中，每个 .cpp 是一个独立的编译单元（translation unit），它不需要被别人包含，只要被编译器拿来处理就行。</li><li>全部丢给编译器，编成 .obj，然后统一链接成 .dll、.exe、.lib 等目标文件。</li><li>头文件不是独立的编译单元</li><li>一种“文字级代码注入机制”：被包含到其他 .cpp 中去，参与语法/符号解析。</li></ul><h3 id="特性决定了不能自动-include" tabindex="-1"><a class="header-anchor" href="#特性决定了不能自动-include"><span>特性决定了不能自动 include：</span></a></h3><ul><li><p>C++ 的 <code>#include</code> 是<strong>预处理阶段</strong>的操作，<strong>不是构建系统能全自动决定的行为</strong>；</p></li><li><p>如果构建系统强制把所有头文件都 <code>#include</code>，你会面临：</p><ul><li>巨大编译开销（所有符号暴露）</li><li>名字冲突、重复定义、顺序依赖灾难</li><li>模块耦合度上升，编译边界模糊</li></ul></li></ul><hr><h3 id="c-头文件采用-显式包含-的设计原因" tabindex="-1"><a class="header-anchor" href="#c-头文件采用-显式包含-的设计原因"><span>C++ 头文件采用“显式包含”的设计原因：</span></a></h3><table><thead><tr><th>原因</th><th>说明</th></tr></thead><tbody><tr><td>✅ 避免冗余</td><td>只 include 你用到的头</td></tr><tr><td>✅ 控制依赖边界</td><td>你知道自己用了哪些外部符号</td></tr><tr><td>✅ 编译速度快</td><td>减少不必要的预处理量</td></tr><tr><td>✅ 保持模块清晰</td><td>不污染命名空间，不传播内部实现</td></tr></tbody></table><hr><h3 id="那为什么-unreal-可以让模块自动暴露-include-路径" tabindex="-1"><a class="header-anchor" href="#那为什么-unreal-可以让模块自动暴露-include-路径"><span>那为什么 Unreal 可以让模块自动暴露 include 路径？</span></a></h3><p>虽然不能自动 include 内容，但 UBT 做了很聪明的事情：</p><blockquote><p>✅ <strong>它会自动把模块中的 <code>Public/</code> 目录加入 include path</strong><br> ✅ <strong>你只需 <code>#include &quot;MyHeader.h&quot;</code>，编译器就能找到它</strong></p></blockquote><p>比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Source/</span></span>\n<span class="line"><span>├── MyModule/</span></span>\n<span class="line"><span>│   ├── Public/</span></span>\n<span class="line"><span>│   │   └── MyStruct.h</span></span>\n<span class="line"><span>│   ├── Private/</span></span>\n<span class="line"><span>│       └── MyActor.cpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他模块里你只需：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;MyStruct.h&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不需要写路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>背后其实是 UBT 添加了 <code>-IYourModule/Public</code> 到 include 路径中。</p>',22))])}]]),r=JSON.parse('{"path":"/posts/Programming/C__/VSCode%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BAC__%E9%A1%B9%E7%9B%AE.html","title":"VSCode手动构建C++项目","lang":"zh-CN","frontmatter":{"tag":["AI_GEN","WIP"],"description":"VSCode手动构建C++项目 C++项目构建简介 cmake make ninja 集成开发环境（VisualStudio） vscode 预编译Include配置 TODO Visual Studio的实现方式Visual Studio的实现方式 Link配置 TODO 题外（For Unreal Engine user），Unreal Engin...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VSCode手动构建C++项目\\",\\"image\\":[\\"https://runner2011.github.io/src/Resources/Programming/VS_build_config.png\\"],\\"dateModified\\":\\"2025-10-11T02:21:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Programming/C__/VSCode%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BAC__%E9%A1%B9%E7%9B%AE.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"VSCode手动构建C++项目"}],["meta",{"property":"og:description","content":"VSCode手动构建C++项目 C++项目构建简介 cmake make ninja 集成开发环境（VisualStudio） vscode 预编译Include配置 TODO Visual Studio的实现方式Visual Studio的实现方式 Link配置 TODO 题外（For Unreal Engine user），Unreal Engin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://runner2011.github.io/src/Resources/Programming/VS_build_config.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T02:21:10.000Z"}],["meta",{"property":"article:tag","content":"WIP"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:modified_time","content":"2025-10-11T02:21:10.000Z"}]]},"git":{"createdTime":1760070092000,"updatedTime":1760149270000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":2,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"posts/Programming/C++/VSCode手动构建C++项目.md","excerpt":"\\n<h2>C++项目构建简介</h2>\\n<ul>\\n<li>cmake</li>\\n<li>make</li>\\n<li>ninja</li>\\n<li>集成开发环境（VisualStudio）</li>\\n<li>vscode</li>\\n</ul>\\n<h2>预编译Include配置</h2>\\n<p>TODO</p>\\n\x3c!-- 这是一个注释，不会在渲染后的页面中显示 ![SS](/src/Resources/Programming/VS_build_config.png) --\x3e\\n<figure><figcaption>Visual Studio的实现方式</figcaption></figure>\\n<h2>Link配置</h2>","autoDesc":true}')}}]);