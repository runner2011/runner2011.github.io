"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[9566],{628:(t,e)=>{e.A=(t,e)=>{const l=t.__vccOpts||t;for(const[t,r]of e)l[t]=r;return l}},3378:(t,e,l)=>{l.r(e),l.d(e,{comp:()=>a,data:()=>i});var r=l(8178);const n={},a=(0,l(628).A)(n,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="抽象数据结构-adt" tabindex="-1"><a class="header-anchor" href="#抽象数据结构-adt"><span>抽象数据结构 (ADT)</span></a></h1><p>Q:抽象数据结构有哪些？</p><p>A （runner2011):简言之，数据结构课程学的数据结构都是ADT. 只是也教了具体实现。</p><p>好问题！我们来认真梳理一下常见的<strong>抽象数据结构（Abstract Data Types）</strong>。它们是程序设计中用来组织、管理和存储数据的方式，和具体实现（比如数组、链表、哈希表、红黑树）相对，抽象数据结构强调<strong>对数据和操作的抽象定义</strong>，不关心底层实现细节。</p><hr><h2 id="📚-常见抽象数据结构分类" tabindex="-1"><a class="header-anchor" href="#📚-常见抽象数据结构分类"><span>📚 常见抽象数据结构分类</span></a></h2><h3 id="📦-线性结构" tabindex="-1"><a class="header-anchor" href="#📦-线性结构"><span>📦 线性结构</span></a></h3><p>数据元素之间是<strong>一对一线性关系</strong></p><ul><li><p><strong>数组（Array）</strong></p><ul><li>定长或动态长度，支持下标访问</li></ul></li><li><p><strong>链表（Linked List）</strong></p><ul><li>单向链表、双向链表、循环链表</li></ul></li><li><p><strong>栈（Stack）</strong></p><ul><li>后进先出 LIFO</li></ul></li><li><p><strong>队列（Queue）</strong></p><ul><li>先进先出 FIFO</li><li>变种：双端队列（Deque）、优先队列（Priority Queue）</li></ul></li></ul><hr><h3 id="🌲-非线性结构" tabindex="-1"><a class="header-anchor" href="#🌲-非线性结构"><span>🌲 非线性结构</span></a></h3><p>数据元素之间存在<strong>一对多或多对多关系</strong></p><ul><li><p><strong>树（Tree）</strong></p><ul><li>二叉树、二叉搜索树、AVL树、红黑树、B树、B+树、堆（Heap）</li></ul></li><li><p><strong>图（Graph）</strong></p><ul><li>有向图、无向图、带权图、邻接表、邻接矩阵</li></ul></li></ul><hr><h3 id="📑-散列结构" tabindex="-1"><a class="header-anchor" href="#📑-散列结构"><span>📑 散列结构</span></a></h3><ul><li><p><strong>哈希表（Hash Table）</strong></p><ul><li>通过散列函数将键映射到数组下标，支持快速查找、插入、删除</li></ul></li></ul><hr><h3 id="📖-其他常用抽象结构" tabindex="-1"><a class="header-anchor" href="#📖-其他常用抽象结构"><span>📖 其他常用抽象结构</span></a></h3><ul><li><p><strong>集合（Set）</strong></p><ul><li>无序、元素唯一，支持并、交、差等操作</li></ul></li><li><p><strong>映射（Map / Dictionary）</strong></p><ul><li>键值对形式存储，键唯一</li></ul></li><li><p><strong>优先队列（Priority Queue）</strong></p><ul><li>每个元素有优先级，优先级高的先出队</li></ul></li><li><p><strong>堆（Heap）</strong></p><ul><li>完全二叉树结构，常用于实现优先队列</li><li>最大堆、最小堆</li></ul></li></ul><hr><h2 id="📌-常见抽象数据结构总结表" tabindex="-1"><a class="header-anchor" href="#📌-常见抽象数据结构总结表"><span>📌 常见抽象数据结构总结表</span></a></h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">常见抽象结构</th><th style="text-align:left;">特点</th></tr></thead><tbody><tr><td style="text-align:left;">线性结构</td><td style="text-align:left;">数组、链表、栈、队列</td><td style="text-align:left;">线性、一对一关系</td></tr><tr><td style="text-align:left;">非线性结构</td><td style="text-align:left;">树、图</td><td style="text-align:left;">一对多、多对多关系</td></tr><tr><td style="text-align:left;">散列结构</td><td style="text-align:left;">哈希表</td><td style="text-align:left;">通过散列函数实现，快速查找</td></tr><tr><td style="text-align:left;">其他</td><td style="text-align:left;">集合、映射、优先队列、堆</td><td style="text-align:left;">特定应用场景，满足不同操作需求</td></tr></tbody></table><hr><h2 id="🌱-衍生结构-部分" tabindex="-1"><a class="header-anchor" href="#🌱-衍生结构-部分"><span>🌱 衍生结构（部分）</span></a></h2><p>一些高级或复合结构，基于基本抽象结构构建：</p><ul><li>Trie 树（字典树）</li><li>并查集（Disjoint Set）</li><li>LRU Cache（链表+哈希表）</li><li>Skip List（跳表）</li><li>Segment Tree（线段树）</li><li>Fenwick Tree（树状数组）</li></ul><hr><p>如果你感兴趣，我还能帮你画个思维导图版本或者 Unreal 引擎用的类图风格整理一下。要不要来一个？😄</p><p>Q:数组为什么既是抽象数据结构，又是具体实现？</p><p>好问题！很多人第一次学数据结构的时候都会觉得「数组」的概念有点模糊——有时候它是<strong>抽象数据结构</strong>，有时候又是<strong>具体实现</strong>。我来给你详细讲清楚👇：</p><hr><h2 id="📌-抽象数据结构-vs-具体实现" tabindex="-1"><a class="header-anchor" href="#📌-抽象数据结构-vs-具体实现"><span>📌 抽象数据结构 vs 具体实现</span></a></h2><ul><li><p><strong>抽象数据结构（Abstract Data Type, ADT）</strong>：</p><ul><li><p>是一种<strong>逻辑上的模型</strong>，规定了：</p><ul><li>这个结构存储什么样的数据</li><li>可以对数据做哪些操作（比如 插入、删除、访问）</li><li>不关心如何实现，只关注“做什么”和“操作规则”</li></ul></li></ul></li><li><p><strong>具体实现（Concrete Data Structure）</strong>：</p><ul><li>是<strong>编程语言或底层内存中的实际实现方式</strong></li><li>具体定义了用什么内存结构、什么算法、什么代码去实现这个抽象结构的功能</li></ul></li></ul><hr><h2 id="📌-那数组是怎么两者兼具的" tabindex="-1"><a class="header-anchor" href="#📌-那数组是怎么两者兼具的"><span>📌 那数组是怎么两者兼具的？</span></a></h2><h3 id="✅-数组作为抽象数据结构" tabindex="-1"><a class="header-anchor" href="#✅-数组作为抽象数据结构"><span>✅ 数组作为<strong>抽象数据结构</strong></span></a></h3><p>在抽象意义上，<strong>数组</strong>是一种：</p><ul><li><strong>有序的元素集合</strong></li><li>可以通过<strong>下标随机访问</strong></li><li>通常固定长度（也可以动态长度）</li><li>操作包括：<code>访问第 i 个元素</code>、<code>更新第 i 个元素</code>、<code>遍历</code>、<code>查找</code>、<code>插入</code>（有时）</li></ul><p>这种描述是<strong>语言无关、实现无关</strong>的逻辑模型，所以它是一个<strong>抽象数据结构</strong></p><hr><h3 id="✅-数组作为具体实现" tabindex="-1"><a class="header-anchor" href="#✅-数组作为具体实现"><span>✅ 数组作为<strong>具体实现</strong></span></a></h3><p>在实际程序里，数组通常是：</p><ul><li><strong>一段连续的内存空间</strong></li><li>每个元素占用相同大小</li><li>下标访问是 <code>地址 + i * 元素大小</code> 实现的</li></ul><p>比如 C++ 里的 <code>int arr[10]</code>，就是具体实现：</p><ul><li>开辟一块连续内存空间，存放 10 个 <code>int</code></li><li>通过 <code>arr[i]</code> 来直接定位到内存地址</li></ul><p><strong>甚至很多其他抽象数据结构（比如栈、队列、哈希表、树）在底层也常用数组来实现</strong></p><hr><h2 id="📖-📊-举个例子" tabindex="-1"><a class="header-anchor" href="#📖-📊-举个例子"><span>📖 📊 举个例子：</span></a></h2><table><thead><tr><th style="text-align:left;">抽象数据结构</th><th style="text-align:left;">具体实现</th></tr></thead><tbody><tr><td style="text-align:left;">数组</td><td style="text-align:left;">连续内存+偏移寻址</td></tr><tr><td style="text-align:left;">栈（抽象）</td><td style="text-align:left;">用数组实现的栈（固定长度）、链表实现的栈</td></tr><tr><td style="text-align:left;">队列（抽象）</td><td style="text-align:left;">数组循环队列、链表队列</td></tr><tr><td style="text-align:left;">哈希表（抽象）</td><td style="text-align:left;">数组 + 链表 或者 数组 + 红黑树</td></tr></tbody></table><hr><h2 id="📌-📌-总结一句" tabindex="-1"><a class="header-anchor" href="#📌-📌-总结一句"><span>📌 📌 总结一句：</span></a></h2><blockquote><p><strong>数组是既可以作为一种抽象的数据结构（描述一组有序元素和访问方式）<br> 也可以作为底层具体实现（在内存中开辟连续空间+偏移寻址）</strong></p></blockquote><hr><p>如果你喜欢，我还能帮你画个「抽象 ↔ 实现」关系图，或者 Unreal 引擎里的 TArray 实现原理也能帮你讲讲。要不要？🎨✨</p>',54)]))}]]),i=JSON.parse('{"path":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(ADT).html","title":"抽象数据结构 (ADT)","lang":"zh-CN","frontmatter":{"tag":["AI_GEN"],"description":"抽象数据结构 (ADT) Q:抽象数据结构有哪些？ A （runner2011):简言之，数据结构课程学的数据结构都是ADT. 只是也教了具体实现。 好问题！我们来认真梳理一下常见的抽象数据结构（Abstract Data Types）。它们是程序设计中用来组织、管理和存储数据的方式，和具体实现（比如数组、链表、哈希表、红黑树）相对，抽象数据结构强调对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象数据结构 (ADT)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-08T03:01:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(ADT).html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"抽象数据结构 (ADT)"}],["meta",{"property":"og:description","content":"抽象数据结构 (ADT) Q:抽象数据结构有哪些？ A （runner2011):简言之，数据结构课程学的数据结构都是ADT. 只是也教了具体实现。 好问题！我们来认真梳理一下常见的抽象数据结构（Abstract Data Types）。它们是程序设计中用来组织、管理和存储数据的方式，和具体实现（比如数组、链表、哈希表、红黑树）相对，抽象数据结构强调对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-08T03:01:22.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:modified_time","content":"2025-06-08T03:01:22.000Z"}]]},"git":{"createdTime":1749351682000,"updatedTime":1749351682000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":4.14,"words":1241},"filePathRelative":"posts/计算机基础/数据结构算法/抽象数据结构 (ADT).md","excerpt":"\\n<p>Q:抽象数据结构有哪些？</p>\\n<p>A （runner2011):简言之，数据结构课程学的数据结构都是ADT. 只是也教了具体实现。</p>\\n<p>好问题！我们来认真梳理一下常见的<strong>抽象数据结构（Abstract Data Types）</strong>。它们是程序设计中用来组织、管理和存储数据的方式，和具体实现（比如数组、链表、哈希表、红黑树）相对，抽象数据结构强调<strong>对数据和操作的抽象定义</strong>，不关心底层实现细节。</p>\\n<hr>\\n<h2>📚 常见抽象数据结构分类</h2>\\n<h3>📦 线性结构</h3>\\n<p>数据元素之间是<strong>一对一线性关系</strong></p>","autoDesc":true}')}}]);