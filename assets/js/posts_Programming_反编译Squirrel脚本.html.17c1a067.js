"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[9591],{628:(a,r)=>{r.A=(a,r)=>{const e=a.__vccOpts||a;for(const[a,t]of r)e[a]=t;return e}},7139:(a,r,e)=>{e.r(r),e.d(r,{comp:()=>n,data:()=>l});var t=e(8178);const i={},n=(0,e(628).A)(i,[["render",function(a,r){return(0,t.uX)(),(0,t.CE)("div",null,r[0]||(r[0]=[(0,t.Fv)('<h1 id="反编译squirrel脚本" tabindex="-1"><a class="header-anchor" href="#反编译squirrel脚本"><span>反编译Squirrel脚本</span></a></h1><h2 id="为什么反编译-看代码的角度-squirrel脚本可以-c-代码不行" tabindex="-1"><a class="header-anchor" href="#为什么反编译-看代码的角度-squirrel脚本可以-c-代码不行"><span>为什么反编译（看代码的角度）Squirrel脚本可以，c++代码不行？</span></a></h2><p>从“能不能看到源代码”的角度，这里有本质差别：</p><hr><h4 id="_1-squirrel-脚本的-cnut" tabindex="-1"><a class="header-anchor" href="#_1-squirrel-脚本的-cnut"><span>1. Squirrel 脚本的 <code>.cnut</code></span></a></h4><ul><li><code>.cnut</code> 是 <strong>字节码</strong>，类似 Python 的 <code>.pyc</code>、Java 的 <code>.class</code>。</li><li>字节码里保留了很多高级信息：常量池（字符串/数字）、函数原型、局部变量名、调用顺序、控制流。</li><li>所以通过专门的反编译器，能比较准确地恢复成可读的 Squirrel 源码（虽然没了注释和原始排版）。</li><li>这就是为什么你能在反编译后看到 <code>this.m.Text = &quot;...&quot;</code>、<code>this.skilllevel = 1;</code> 这种高级结构。</li></ul><hr><h4 id="_2-c-编译后的二进制" tabindex="-1"><a class="header-anchor" href="#_2-c-编译后的二进制"><span>2. C++ 编译后的二进制</span></a></h4><ul><li><p>C++ 编译会生成 <strong>机器码</strong>（CPU 指令），不保留高级语言结构。</p></li><li><p>在编译过程中，C++ 源码的 <strong>注释、变量名、大部分函数名、控制流结构</strong> 都会消失或被极大优化。</p></li><li><p>最终留下的只是：</p><ul><li>机器指令（<code>mov</code>, <code>jmp</code>, <code>add</code> …）</li><li>符号表（如果没被 strip，能看到函数名，但没源码）</li><li>常量字符串（还能被提取）</li></ul></li><li><p>你能用 IDA、Ghidra 之类的反汇编工具看到汇编/反编译成伪 C 代码，但那已经失去了原始的结构和可读性，远不如 Squirrel 字节码的恢复度。</p></li></ul><hr><h4 id="_3-关键区别" tabindex="-1"><a class="header-anchor" href="#_3-关键区别"><span>3. 关键区别</span></a></h4><ul><li><strong>脚本语言字节码（Squirrel、Lua、Python）</strong>：保留了相对高级的语义信息 → 反编译可读性强。</li><li><strong>原生编译语言（C++）</strong>：编译成机器码，几乎没有高级语义 → 反编译只能得到低层次的汇编或接近的伪 C。</li></ul><hr><h4 id="_4-类比" tabindex="-1"><a class="header-anchor" href="#_4-类比"><span>4. 类比</span></a></h4><ul><li>看 <code>.cnut</code>：就像看一本压缩过的电子书（去掉了封面和书签，但正文还在）。</li><li>看 C++ 二进制：就像看打印机喷墨的二进制点阵，你能猜个大概图案，但几乎恢复不回完整文章。</li></ul><hr><p>✅ 所以答案是：</p><ul><li><strong>脚本 <code>.cnut</code> → 可反编译回接近完整源码。</strong></li><li><strong>C++ 二进制 → 只能反汇编成低级代码，不等同于原始源码。</strong></li></ul><hr><h2 id="是不是c-java也是字节码-所以用一些dpy工具可以反编译看到源码" tabindex="-1"><a class="header-anchor" href="#是不是c-java也是字节码-所以用一些dpy工具可以反编译看到源码"><span>是不是c#, java也是字节码，所以用一些dpy工具可以反编译看到源码</span></a></h2><p>对，你理解得很对 👍。</p><h3 id="c-java-为什么能反编译出源码" tabindex="-1"><a class="header-anchor" href="#c-java-为什么能反编译出源码"><span>C# / Java 为什么能反编译出源码</span></a></h3><ul><li><strong>C# 编译 → MSIL (Microsoft Intermediate Language)</strong></li><li><strong>Java 编译 → JVM bytecode (class 文件)</strong></li></ul><p>它们都不是直接编译成机器码，而是编译成 <strong>中间字节码</strong>，运行时再交给 JIT（即时编译器）或解释器执行。</p><p>这些字节码和 Squirrel <code>.cnut</code> 很像：</p><ul><li>会保留 <strong>类、方法、属性、常量池</strong> 等高级信息。</li><li>局部变量名、参数名在编译时一般也会写入 class/assembly（除非编译器优化掉或 strip）。</li><li>因此，反编译器（如 Java 的 JD-GUI、C# 的 dnSpy、ILSpy）能非常接近地还原原始源码。</li></ul><hr><h3 id="对比不同语言编译结果" tabindex="-1"><a class="header-anchor" href="#对比不同语言编译结果"><span>对比不同语言编译结果</span></a></h3><table><thead><tr><th>语言</th><th>编译产物</th><th>信息保留度</th><th>可反编译程度</th></tr></thead><tbody><tr><td><strong>Java</strong></td><td><code>.class</code> 字节码</td><td>类结构、方法、常量池、局部变量</td><td>几乎完整（缺注释）</td></tr><tr><td><strong>C#</strong></td><td><code>.dll</code> / <code>.exe</code> (IL)</td><td>类结构、方法、属性、常量池</td><td>几乎完整（缺注释）</td></tr><tr><td><strong>Squirrel</strong></td><td><code>.cnut</code> (字节码)</td><td>函数、变量名、常量、控制流</td><td>可读源码级（缺注释/缩进）</td></tr><tr><td><strong>Python</strong></td><td><code>.pyc</code> (字节码)</td><td>常量、函数定义、控制流</td><td>可反编译回源码级（缺注释）</td></tr><tr><td><strong>C/C++</strong></td><td>机器码</td><td>几乎只剩汇编指令</td><td>只能反汇编，看不到源码结构</td></tr></tbody></table><hr><h3 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h3><ul><li><strong>字节码语言（Java、C#、Python、Squirrel、Lua）</strong>：因为目标是跨平台运行，必须在字节码里保留丰富的元信息 → 易反编译。</li><li><strong>原生语言（C/C++）</strong>：直接编译成机器码，几乎丢光了源码信息 → 反编译可读性差。</li></ul><hr><p>换句话说：</p><ul><li><strong>Java/C# 程序</strong> → “一编译就能反编译回来”，所以才需要额外的 <strong>混淆器</strong>（ProGuard, Dotfuscator 等）来增加破解难度。</li><li><strong>C/C++ 程序</strong> → 本身就难以恢复源码，不太需要混淆，但会有人用 <strong>packers/obfuscators</strong> 增加分析难度。</li></ul><hr><h2 id="针对java-c-字节码程序-保护代码方式" tabindex="-1"><a class="header-anchor" href="#针对java-c-字节码程序-保护代码方式"><span>针对java/c#字节码程序，保护代码方式</span></a></h2><h3 id="概览-—-目标与限制" tabindex="-1"><a class="header-anchor" href="#概览-—-目标与限制"><span>概览 — 目标与限制</span></a></h3><p>字节码语言（Java 的 <code>.class</code> / Android 的 <code>.dex</code>，C# 的 IL）天生保留很多元信息，<strong>不能被彻底“防反编译”</strong>，只能提高反向工程难度、增加时间/成本门槛。保护思路分成两类：<strong>提高分析难度（混淆/变形）</strong> 与 <strong>降低泄露风险（把关键逻辑移到受控环境或原生）</strong>。每种方法都有权衡（调试难度、兼容性、性能、成本）。</p><hr><h3 id="常用保护手段-按从容易到难-成本增高排列" tabindex="-1"><a class="header-anchor" href="#常用保护手段-按从容易到难-成本增高排列"><span>常用保护手段（按从容易到难/成本增高排列）</span></a></h3><h4 id="_1-名称-结构混淆-renaming" tabindex="-1"><a class="header-anchor" href="#_1-名称-结构混淆-renaming"><span>1) 名称/结构混淆（Renaming）</span></a></h4><ul><li>把类名、方法名、字段名改成无意义短名（a, b, c...），让反编译的源码可读性大幅下降。</li><li>Java 工具：ProGuard、R8（Android）、Zelix、Allatori、DashO。</li><li>.NET 工具：Dotfuscator、ConfuserEx、SmartAssembly、<a href="http://Eazfuscator.NET" target="_blank" rel="noopener noreferrer">Eazfuscator.NET</a>。</li><li>优点：兼容性好、开源或免费工具可用（ProGuard/ConfuserEx）。</li><li>缺点：反射、序列化、注解/属性、资源绑定等会被破坏，需要配置保留名单（keep rules）。</li></ul><h4 id="_2-控制流平坦化-控制流混淆-control-flow-obfuscation" tabindex="-1"><a class="header-anchor" href="#_2-控制流平坦化-控制流混淆-control-flow-obfuscation"><span>2) 控制流平坦化 / 控制流混淆（Control-flow obfuscation）</span></a></h4><ul><li>通过改变编译/反编译后的控制流布局（插入难以理解的跳转/分支），让自动反编译器产出难读的伪代码。</li><li>优点：使静态分析更难；对读源码帮助有限。</li><li>缺点：可能影响性能，工具实现差异大。</li></ul><h4 id="_3-字符串加密-延迟解密-string-encryption" tabindex="-1"><a class="header-anchor" href="#_3-字符串加密-延迟解密-string-encryption"><span>3) 字符串加密 / 延迟解密（String encryption）</span></a></h4><ul><li>把常量字符串（错误信息、重要常量、IP、Key 等）加密，运行时才解密使用。</li><li>对中文/敏感文本特别有效（反编译时看不到明文）。</li><li>缺点：引入运行时解密逻辑，若被 hook 也能获取。</li></ul><h4 id="_4-元数据-调试信息移除-strip-symbols-remove-debug-info" tabindex="-1"><a class="header-anchor" href="#_4-元数据-调试信息移除-strip-symbols-remove-debug-info"><span>4) 元数据/调试信息移除（Strip symbols / Remove debug info）</span></a></h4><ul><li>对 .NET 可 strip PDB、对 Java 去掉行号表（但会降低可读性与调试体验）。</li><li>保持 mapping 文件（混淆前后映射）用于内部调试，但不要发布映射文件。</li></ul><h4 id="_5-把关键逻辑转为原生代码-native-aot" tabindex="-1"><a class="header-anchor" href="#_5-把关键逻辑转为原生代码-native-aot"><span>5) 把关键逻辑转为原生代码（Native / AOT）</span></a></h4><ul><li>把非常敏感、核心算法或关键检查用 C/C++ 写并编译为本机库（so/dll），从字节码层移除。</li><li>Java 可用 JNI 调用；C# 可用 P/Invoke 或 Native AOT。</li><li>使用 AOT 编译：GraalVM native-image（Java → native），.NET Native / NativeAOT（C# → native）。</li><li>优点：反编译难度大幅增加（需要反汇编/逆向本机二进制）。</li><li>缺点：跨平台构建复杂、调试/部署复杂、体积增大。</li></ul><h4 id="_6-运行时完整性检测-反调试-反篡改" tabindex="-1"><a class="header-anchor" href="#_6-运行时完整性检测-反调试-反篡改"><span>6) 运行时完整性检测 / 反调试 / 反篡改</span></a></h4><ul><li>检查二进制/字节码是否被篡改（校验签名/哈希）；检测调试器、内存注入、断点；对抗内存 dump。</li><li>配合混淆一起使用效果更好。</li><li>易被逆向工程者绕过（但会增加工作量）。</li></ul><h4 id="_7-代码虚拟化-加密执行-code-virtualization" tabindex="-1"><a class="header-anchor" href="#_7-代码虚拟化-加密执行-code-virtualization"><span>7) 代码虚拟化 / 加密执行（Code virtualization）</span></a></h4><ul><li>把部分代码转换成在自定义虚拟机上解释执行（虚拟化指令集），极难恢复成高层源码。</li><li>商业工具支持（通常昂贵），并且有性能损耗、兼容性问题。</li></ul><h4 id="_8-pack-wrap-license-系统-加壳-授权验证" tabindex="-1"><a class="header-anchor" href="#_8-pack-wrap-license-系统-加壳-授权验证"><span>8) Pack/Wrap/License 系统（加壳 + 授权验证）</span></a></h4><ul><li>把应用打包并在启动时做完整性 + 授权校验，授权失败拒绝运行或降级。</li><li>常用于商业桌面/移动应用增加破解难度。</li></ul><hr><h3 id="常见保护工具-举例" tabindex="-1"><a class="header-anchor" href="#常见保护工具-举例"><span>常见保护工具（举例）</span></a></h3><ul><li>Java/Android：ProGuard（免费）、R8（Android默认）、DexGuard（商业，基于ProGuard但更强）、Zelix、DashO、Allatori。</li><li>.NET(C#)：ConfuserEx（开源）、ConfuserEx2、Dotfuscator（Microsoft 提供，社区/商业版）、SmartAssembly、<a href="http://Eazfuscator.NET" target="_blank" rel="noopener noreferrer">Eazfuscator.NET</a>、Babel .NET。</li><li>Native/AOT：GraalVM native-image（Java）、.NET Native / NativeAOT、Xamarin AOT、（商业）Excelsior JET（历史上存在，现状需确认）。</li></ul><hr><h3 id="实践建议-如何组合" tabindex="-1"><a class="header-anchor" href="#实践建议-如何组合"><span>实践建议（如何组合）</span></a></h3><ol><li><strong>先做通用混淆</strong>（renaming + string encryption），并维持映射文件但不要发布。</li><li><strong>处理反射/序列化点</strong>，写好保留规则（keep rules / exclusions），做大量测试。</li><li><strong>把真正敏感的业务逻辑或加密/许可证相关代码迁移到后端</strong>（最安全）或编译为 native 模块（次优）。</li><li><strong>为发布构建自动化流程</strong>：build → obfuscate → strip debug → run integration tests → sign artifact。</li><li><strong>监测与法律</strong>：对外发布前做代码签名并用防篡改检测；同时在 EULA / 服务条款中声明逆向/篡改责任（法律层面辅助）。</li><li><strong>发布后保留映射/符号</strong> 用于 crash 分析与定位问题（不要公开映射）。</li></ol><hr><h3 id="代价与实际效果-务必理解" tabindex="-1"><a class="header-anchor" href="#代价与实际效果-务必理解"><span>代价与实际效果（务必理解）</span></a></h3><ul><li><strong>没有 100% 安全</strong>：混淆/加密只是增大逆向工程成本。决心强的攻击者在时间和工具允许下仍能恢复关键逻辑。</li><li><strong>兼容性/调试成本</strong>：混淆会破坏堆栈跟踪、日志与调试流程。建议保留内部 mapping 并测试反射/序列化密集的模块。</li><li><strong>性能影响</strong>：控制流混淆、字符串解密、虚拟化等会带来性能损耗。要权衡用户体验。</li><li><strong>成本</strong>：高强度的商业保护（DexGuard、商业虚拟化）昂贵，但对企业级产品更可取。</li></ul><hr><h3 id="针对不同场景的推荐方案-简短" tabindex="-1"><a class="header-anchor" href="#针对不同场景的推荐方案-简短"><span>针对不同场景的推荐方案（简短）</span></a></h3><ul><li><strong>移动应用（Android）</strong>：R8/ProGuard（基础） + DexGuard（付费，高安全） + 字符串加密 + 把敏感逻辑放后端。</li><li><strong>Java 桌面/服务端</strong>：混淆（ProGuard/DashO）+ 对客户端敏感逻辑 native/AOT 或移到服务器。服务端本身通常不用混淆（放在后端更安全）。</li><li><strong>.NET 桌面（WPF/WinForms）</strong>：ConfuserEx / Dotfuscator / SmartAssembly + NativeAOT 对关键模块（或用 C++ 写关键库）。</li><li><strong>高价值算法/密钥管理</strong>：优先放到受控后端或 HSM，而不是客户端。</li></ul><hr><h3 id="快速检核清单-发布前" tabindex="-1"><a class="header-anchor" href="#快速检核清单-发布前"><span>快速检核清单（发布前）</span></a></h3><ul><li>是否为反射/序列化/注解写了保留规则？</li><li>混淆后是否通过单元/集成/端到端测试？</li><li>是否保留映射用于 crash 调试但未公开？</li><li>是否把真正敏感逻辑移到后端或 native？</li><li>是否有防篡改/签名和 license 校验机制？</li></ul>',72)]))}]]),l=JSON.parse('{"path":"/posts/Programming/%E5%8F%8D%E7%BC%96%E8%AF%91Squirrel%E8%84%9A%E6%9C%AC.html","title":"反编译Squirrel脚本","lang":"zh-CN","frontmatter":{"tag":["AI_GEN"],"description":"反编译Squirrel脚本 为什么反编译（看代码的角度）Squirrel脚本可以，c++代码不行？ 从“能不能看到源代码”的角度，这里有本质差别： 1. Squirrel 脚本的 .cnut .cnut 是 字节码，类似 Python 的 .pyc、Java 的 .class。 字节码里保留了很多高级信息：常量池（字符串/数字）、函数原型、局部变量名、...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反编译Squirrel脚本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-28T04:26:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Programming/%E5%8F%8D%E7%BC%96%E8%AF%91Squirrel%E8%84%9A%E6%9C%AC.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"反编译Squirrel脚本"}],["meta",{"property":"og:description","content":"反编译Squirrel脚本 为什么反编译（看代码的角度）Squirrel脚本可以，c++代码不行？ 从“能不能看到源代码”的角度，这里有本质差别： 1. Squirrel 脚本的 .cnut .cnut 是 字节码，类似 Python 的 .pyc、Java 的 .class。 字节码里保留了很多高级信息：常量池（字符串/数字）、函数原型、局部变量名、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-28T04:26:19.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:modified_time","content":"2025-09-28T04:26:19.000Z"}]]},"git":{"createdTime":1759033579000,"updatedTime":1759033579000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":8.17,"words":2450},"filePathRelative":"posts/Programming/反编译Squirrel脚本.md","excerpt":"\\n<h2>为什么反编译（看代码的角度）Squirrel脚本可以，c++代码不行？</h2>\\n<p>从“能不能看到源代码”的角度，这里有本质差别：</p>\\n<hr>\\n<h4>1. Squirrel 脚本的 <code>.cnut</code></h4>\\n<ul>\\n<li><code>.cnut</code> 是 <strong>字节码</strong>，类似 Python 的 <code>.pyc</code>、Java 的 <code>.class</code>。</li>\\n<li>字节码里保留了很多高级信息：常量池（字符串/数字）、函数原型、局部变量名、调用顺序、控制流。</li>\\n<li>所以通过专门的反编译器，能比较准确地恢复成可读的 Squirrel 源码（虽然没了注释和原始排版）。</li>\\n<li>这就是为什么你能在反编译后看到 <code>this.m.Text = \\"...\\"</code>、<code>this.skilllevel = 1;</code> 这种高级结构。</li>\\n</ul>","autoDesc":true}')}}]);