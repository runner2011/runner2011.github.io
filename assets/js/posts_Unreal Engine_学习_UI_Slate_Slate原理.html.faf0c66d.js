"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[3806],{628:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,l]of s)a[i]=l;return a}},3884:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var l=a(8178);const n={},e=(0,a(628).A)(n,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,s[0]||(s[0]=[(0,l.Fv)('<h1 id="slate原理" tabindex="-1"><a class="header-anchor" href="#slate原理"><span>Slate原理</span></a></h1><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览"><span>概览</span></a></h2><p><strong>Slate</strong> 是完全自定义、与平台无关的用户界面框架，旨在让工具和应用程序（比如虚幻编辑器）的用户界面或游戏中用户界面的构建过程变得有趣、高效。它将声明性语法与轻松设计、布局和风格组件的功能相结合，允许在UI上轻松实现创建和迭代。</p><p>Unreal官方文档：<a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine</a> 是比较好的了解Slate原理的入门第一篇文章</p><h2 id="渲染机制" tabindex="-1"><a class="header-anchor" href="#渲染机制"><span>渲染机制</span></a></h2><p>总结：UE Slate - 虚幻引擎设计浅析</p><h3 id="_1-slate-的两次排布" tabindex="-1"><a class="header-anchor" href="#_1-slate-的两次排布"><span>1 Slate 的两次排布</span></a></h3><p>Slate 是一个分辨率自适应的相对布局系统，采用“两次排布”机制：</p><ol><li>递归计算控件大小：父控件根据子控件大小递归计算自身大小。</li><li>计算绘制位置：根据确定的控件大小，计算每个控件的具体绘制位置。 由于部分控件大小可变，必须先确定固定大小，再进行实际排布。</li></ol><h3 id="_2-slate-的更新" tabindex="-1"><a class="header-anchor" href="#_2-slate-的更新"><span>2 Slate 的更新</span></a></h3><p>Slate 更新与引擎更新分离：</p><ul><li><p>FEngineLoop 先更新引擎，再调用 FSlateApplication::Tick 函数更新 Slate。</p></li><li><p>FSlateApplication 管理 Slate 程序，负责窗口绘制：</p><ol><li>调用 TickWindowAndChildren 更新所有窗口。</li><li>调用 Draw 系列函数绘制对象。</li></ol></li><li><p>FSlateApplication 并非 Slate 组件，仅负责管理。</p></li></ul><h3 id="_3-slate-的渲染" tabindex="-1"><a class="header-anchor" href="#_3-slate-的渲染"><span>3 Slate 的渲染</span></a></h3><p>Slate 渲染采用“先准备，再渲染”流程，而非递归渲染：</p><ol><li><p>准备阶段：Slate 对象生成 WindowElement 渲染内容。</p></li><li><p>渲染阶段：内容交由 SlateRHIRenderer，通过虚幻引擎的 RHI 接口绘制：</p><ul><li>控件转为图形面片。</li><li>使用 GPU 的 PixelShader 和 VertexShader 绘制。</li><li>结果显示在 SWindow 中。</li></ul></li><li><p>渲染特点：</p><ul><li>无深度检测，所有对象 Z 轴设为 0，按绘制顺序堆叠。</li><li>无更新区域概念，被遮盖区域仍被绘制（经 RenderDoc 验证）。</li></ul></li><li><p>优化方案：ElementBatch（对象批量渲染）：</p><ul><li>非重叠控件可同时渲染。</li><li>重叠控件（如 SOverlay、SCanvas）按层级编号逐次渲染。</li><li>非重叠控件（如 SVerticalBox）子对象层级编号相同，可批量渲染。</li><li>通过层级编号构建树状结构，优化渲染效率。例如，案例中渲染请求从 5 次降至 3 次，复杂界面优化更显著。</li></ul></li></ol><p>总结：Slate 通过两次排布实现自适应布局，更新与引擎分离，渲染采用先准备后绘制流程，并通过 ElementBatch 优化减少 DrawCall，提升复杂界面渲染效率。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span> 原理</span></a></h2><p>Slate 是 Unreal Engine 中的一个用户界面（UI）框架，用于构建灵活、可定制的界面，例如编辑器界面、游戏菜单、HUD 等。它基于 C++，结合了声明式的 UI 描述方式，允许开发者创建高性能、可扩展的界面。以下是对 Slate 的简要介绍：</p><p>1. Slate 的核心概念</p><ul><li>声明式 UI：Slate 使用声明式语法来定义界面布局，开发者通过 C++ 或蓝图（Blueprints）描述 UI 组件的结构和样式，而无需手动管理渲染或事件处理。</li><li>Widget 驱动：Slate 的界面由各种 Widget（控件）组成，如按钮（SButton）、文本框（SEditableText）、面板（SPanel）等。每个 Widget 负责特定的功能或显示。</li><li>跨平台支持：Slate 设计为跨平台运行，确保界面在不同设备和分辨率上保持一致性。</li><li>高性能：Slate 针对实时渲染优化，适合游戏和编辑器的高性能需求。</li></ul><p>2. Slate 的主要特点</p><ul><li>模块化设计：开发者可以组合和嵌套 Widget 来创建复杂的界面布局。</li><li>样式自定义：Slate 支持通过 Slate 样式集（Style Sets）定义主题和视觉风格，允许动态调整 UI 的外观。</li><li>事件处理：Slate 提供了强大的事件系统，支持鼠标、键盘、触摸等输入方式，方便实现交互逻辑。</li><li>动态布局：支持动态调整 UI 的大小和位置，适应不同屏幕分辨率和纵横比。</li><li>蓝图集成：虽然 Slate 主要基于 C++，Unreal Engine 的 UMG（Unreal Motion Graphics）系统允许通过蓝图可视化地创建 Slate 界面，降低了开发门槛。</li></ul><p>3. Slate 的工作原理</p><p>Slate 的核心是一个基于 Widget 的树状结构：</p><ul><li>SWidget：所有控件的基类，定义了 UI 元素的基本行为。</li><li>布局控件：如 SVerticalBox（垂直布局）、SHorizontalBox（水平布局）、SGridPanel（网格布局）等，用于组织子 Widget。</li><li>渲染与更新：Slate 使用 Unreal 的渲染管道，基于 Slate 渲染器（Slate Renderer）高效绘制 UI，支持 2D 和 3D 界面。</li></ul><p>4. Slate vs UMG</p><ul><li>Slate：更底层，直接用 C++ 编写，适合需要高度定制或复杂逻辑的 UI（如 Unreal 编辑器本身）。</li><li>UMG：基于 Slate 的高级封装，面向蓝图用户，适合快速构建游戏内 UI（如菜单、HUD）。</li><li>UMG 实际上是对 Slate 的包装，底层仍然依赖 Slate 的渲染和事件处理。</li></ul><p>5. 使用 Slate 的场景</p><ul><li>游戏内 UI：如主菜单、设置界面、HUD。</li><li>编辑器扩展：自定义 Unreal 编辑器的工具窗口或面板。</li><li>复杂交互：需要精细控制交互逻辑的界面，如支持拖放、动态调整的工具。</li></ul><p>6. 基本代码示例</p><p>以下是一个简单的 Slate Widget 定义示例（C++）：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;SlateBasics.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;SlateExtras.h&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SMyCustomWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SCompoundWidget</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    SLATE_BEGIN_ARGS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SMyCustomWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    SLATE_END_ARGS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Construct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FArguments</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> InArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ChildSlot</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        [</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            SNew</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SVerticalBox)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SVerticalBox::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            [</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                SNew</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SButton)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">FText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FromString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Click Me!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OnClicked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">FOnClicked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateRaw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SMyCustomWidget::OnButtonClicked))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ]</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SVerticalBox::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            [</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                SNew</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STextBlock)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">FText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FromString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, Slate!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    FReply</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OnButtonClicked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 按钮点击逻辑</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FReply::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Handled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码创建了一个垂直布局的 UI，包含一个按钮和一个文本块。</p><p>7. 学习资源</p><ul><li>官方文档：Unreal Engine 官网的 Slate 文档提供了详细的 API 和教程。</li><li>UMG 入门：如果不熟悉 C++，可以通过 UMG 学习 Slate 的间接使用方式。</li><li>社区教程：Unreal 社区和论坛（如 Unreal Slackers、官方论坛）有许多 Slate 开发的示例和讨论。</li></ul><p>总结</p><p>Slate 是 Unreal Engine 中强大的 UI 框架，适合需要高性能和灵活性的界面开发。虽然学习曲线较陡（尤其是 C++ 部分），但通过 UMG 的封装，开发者可以快速上手。对于需要深度定制的场景，直接使用 Slate 能提供更大的控制力。</p><p>如果需要更具体的代码示例、UMG 对比分析，或者关于 Slate 的某个方面（如样式或事件处理）的深入讲解，请告诉我！</p>',38)]))}]]),t=JSON.parse('{"path":"/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/Slate/Slate%E5%8E%9F%E7%90%86.html","title":"Slate原理","lang":"zh-CN","frontmatter":{"date":"2025-06-27T00:00:00.000Z","tag":["AI_GEN"],"description":"Slate原理 概览 Slate 是完全自定义、与平台无关的用户界面框架，旨在让工具和应用程序（比如虚幻编辑器）的用户界面或游戏中用户界面的构建过程变得有趣、高效。它将声明性语法与轻松设计、布局和风格组件的功能相结合，允许在UI上轻松实现创建和迭代。 Unreal官方文档：https://dev.epicgames.com/documentation/...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Slate原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-27T15:28:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/Slate/Slate%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"Slate原理"}],["meta",{"property":"og:description","content":"Slate原理 概览 Slate 是完全自定义、与平台无关的用户界面框架，旨在让工具和应用程序（比如虚幻编辑器）的用户界面或游戏中用户界面的构建过程变得有趣、高效。它将声明性语法与轻松设计、布局和风格组件的功能相结合，允许在UI上轻松实现创建和迭代。 Unreal官方文档：https://dev.epicgames.com/documentation/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-27T15:28:02.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:published_time","content":"2025-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-27T15:28:02.000Z"}]]},"git":{"createdTime":1751038082000,"updatedTime":1751038082000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":5.47,"words":1641},"filePathRelative":"posts/Unreal Engine/学习/UI/Slate/Slate原理.md","excerpt":"\\n<h2>概览</h2>\\n<p><strong>Slate</strong>&nbsp;是完全自定义、与平台无关的用户界面框架，旨在让工具和应用程序（比如虚幻编辑器）的用户界面或游戏中用户界面的构建过程变得有趣、高效。它将声明性语法与轻松设计、布局和风格组件的功能相结合，允许在UI上轻松实现创建和迭代。</p>\\n<p>Unreal官方文档：<a href=\\"https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine</a> 是比较好的了解Slate原理的入门第一篇文章</p>","autoDesc":true}')}}]);