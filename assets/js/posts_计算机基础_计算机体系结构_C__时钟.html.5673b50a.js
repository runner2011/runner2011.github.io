"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[5409],{628:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,t]of a)n[s]=t;return n}},9107:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>h,data:()=>c});var t=n(8178);const i=n.p+"assets/img/cpp_chrono.c3536bdd.png",l={id:"q-stdsteady-clock是什么",tabindex:"-1"},e={class:"header-anchor",href:"#q-stdsteady-clock是什么"},p={id:"例子-stdsteady-clock-now-返回的是什么",tabindex:"-1"},r={class:"header-anchor",href:"#例子-stdsteady-clock-now-返回的是什么"},o={},h=(0,n(628).A)(o,[["render",function(s,a){const n=(0,t.g2)("VPIcon");return(0,t.uX)(),(0,t.CE)("div",null,[a[4]||(a[4]=(0,t.Lk)("h1",{id:"c-时钟",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#c-时钟"},[(0,t.Lk)("span",null,"C++时钟")])],-1)),a[5]||(a[5]=(0,t.Lk)("h2",{id:"q-c-时钟的精度如何-提供时钟的原理是什么",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#q-c-时钟的精度如何-提供时钟的原理是什么"},[(0,t.Lk)("span",null,"Q:C++时钟的精度如何，提供时钟的原理是什么？")])],-1)),a[6]||(a[6]=(0,t.Lk)("p",null,[(0,t.eW)("TLDR："),(0,t.Lk)("br"),(0,t.eW)(" C++ chrono 能提供 ns 级别的稳定计时，是因为计算机硬件中有"),(0,t.Lk)("strong",null,"晶体振荡器(Crystal Oscillator)"),(0,t.eW)(" 提供 "),(0,t.Lk)("strong",null,"ppm(parts per million(百万分之一))"),(0,t.eW)(" 稳定度的基准频率，硬件计数器以这个频率递增。现代 CPU 可通过固定频率或倍频生成高频计数源，通过计数周期数并结合频率换算，得到高分辨率的时间值。steady_clock 使用这种硬件计数器来保证单调和高分辨率，但它的 ns 只是表示精细的刻度，不代表与真实物理秒的绝对偏差为 0。")],-1)),(0,t.Lk)("h2",l,[(0,t.Lk)("a",e,[(0,t.Lk)("span",null,[a[0]||(a[0]=(0,t.eW)("Q:std")),(0,t.bF)(n,{icon:"chrono"}),a[1]||(a[1]=(0,t.eW)("steady_clock是什么"))])])]),a[7]||(a[7]=(0,t.Fv)('<p><code>std::chrono::steady_clock</code> 是 C++ 标准库 <code>&lt;chrono&gt;</code> 里的一种<strong>时钟类型</strong>，用来提供<strong>单调递增</strong>（steady）的时间点测量。</p><h3 id="核心特点" tabindex="-1"><a class="header-anchor" href="#核心特点"><span>核心特点</span></a></h3><ol><li><p><strong>单调递增</strong></p><ul><li>不会因为系统时间的修改而倒退或跳变。</li><li>适合测量两个时间点之间的<strong>持续时间</strong>。</li><li>即使用户手动调整系统时钟，或 NTP 同步系统时间，也不会影响它的计时结果。</li></ul></li><li><p><strong>固定的时间间隔</strong></p><ul><li><code>steady_clock::now()</code> 返回的时间间隔是稳定的，不会因为 CPU 频率调整而不精确。</li><li>用于性能测量或超时检测时，结果可预测。</li></ul></li><li><p><strong>不可与系统时间直接对应</strong></p><ul><li>它返回的 <code>time_point</code> 没有直接的“现实时间”意义，不能用来表示具体的日期或时间戳。</li><li>更像是一个“内部秒表”，只保证相对间隔可靠。</li></ul></li></ol><hr><h3 id="常见用途" tabindex="-1"><a class="header-anchor" href="#常见用途"><span>常见用途</span></a></h3><ul><li><p>测量函数运行耗时：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;chrono&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;thread&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> start </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">steady_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">this_thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep_for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 模拟耗时操作</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> end </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">steady_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> duration </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">duration_cast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;std::chrono::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">milliseconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(end </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> start);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;耗时: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 毫秒</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使在运行中修改系统时间，结果也不会受影响。</p></li></ul><hr><h3 id="和其他时钟的对比" tabindex="-1"><a class="header-anchor" href="#和其他时钟的对比"><span>和其他时钟的对比</span></a></h3><table><thead><tr><th>时钟类型</th><th>是否单调递增</th><th>是否受系统时间调整影响</th><th>用途</th></tr></thead><tbody><tr><td><code>system_clock</code></td><td>❌</td><td>✅</td><td>获取当前的日历时间（现实世界时间）</td></tr><tr><td><code>steady_clock</code></td><td>✅</td><td>❌</td><td>精准测量时间间隔（计时器）</td></tr><tr><td><code>high_resolution_clock</code></td><td>实现相关</td><td>实现相关</td><td>提供最高精度的计时，但不一定稳定</td></tr></tbody></table><blockquote><p><strong>注意</strong>：在多数实现中，<code>high_resolution_clock</code> 可能只是 <code>steady_clock</code> 或 <code>system_clock</code> 的别名。</p></blockquote><h2 id="q-用词上为什么选择chrono和steady" tabindex="-1"><a class="header-anchor" href="#q-用词上为什么选择chrono和steady"><span>Q:用词上为什么选择chrono和steady？</span></a></h2><p>这两个名字其实是有深思熟虑的命名设计，不是随便拍脑袋取的。</p><h2 id="_1-为什么叫-chrono" tabindex="-1"><a class="header-anchor" href="#_1-为什么叫-chrono"><span>1. 为什么叫 <strong><code>chrono</code></strong></span></a></h2><ul><li><p><strong>词源</strong>：来自希腊语 <strong>χρόνος (khrónos)</strong>，意思是<strong>时间</strong>。</p></li><li><p>在很多西方技术术语中，<code>chrono</code> 是“与时间有关”的通用前缀，比如：</p><ul><li>chronology（年代学）</li><li>chronometer（精密计时器）</li><li>synchronous/asynchronous（同步/异步，词根同源）</li></ul></li></ul><p>C++ 标准库作者选 <code>chrono</code> 做命名空间名，是因为它非常直观：</p><ul><li>见到 <code>&lt;chrono&gt;</code> → 立刻联想到“时间处理”</li><li>避免用 <code>time</code> 这种太常见的名字（会和 <code>&lt;ctime&gt;</code>、平台 API 名字冲突）</li></ul><blockquote><p>换句话说，<code>chrono</code> 是为了既<strong>语义清晰</strong>又<strong>不与旧 API 混淆</strong>。</p></blockquote><hr><h2 id="_2-为什么叫-steady-clock" tabindex="-1"><a class="header-anchor" href="#_2-为什么叫-steady-clock"><span>2. 为什么叫 <strong><code>steady_clock</code></strong></span></a></h2><ul><li><p><strong>steady</strong>：英语里有“稳定的、持续的、不间断的”意思</p></li><li><p>在计时领域，steady clock 就是指<strong>单调递增、不受外部干扰的时钟</strong>。</p><ul><li>不会倒退</li><li>不会跳变</li><li>走时速度稳定（恒定 tick rate）</li></ul></li></ul><p>在标准里，<code>steady_clock</code> 的语义就是：</p><blockquote><p>一个 <strong>monotonic clock</strong>（单调时钟），测量时间间隔时结果不受系统时间调整影响。</p></blockquote><p>相比之下：</p><ul><li><code>system_clock</code>：代表真实世界的挂钟时间（会被用户/NTP调整）</li><li><code>steady_clock</code>：代表一个稳定、不跳变的计时基准</li></ul><hr><h2 id="_3-命名背后的风格" tabindex="-1"><a class="header-anchor" href="#_3-命名背后的风格"><span>3. 命名背后的风格</span></a></h2><p>C++ 标准库的命名哲学：</p><ol><li><strong>用真实领域的术语</strong>（chrono 来自时间学，steady 是计时领域常用形容词）</li><li><strong>保证语义直观</strong>（一看就知道是干什么的）</li><li><strong>避免缩写和模糊命名</strong>（不叫 sc 或 s_clock 这种）</li></ol><hr><h2 id="_4-补充" tabindex="-1"><a class="header-anchor" href="#_4-补充"><span>4. 补充</span></a></h2><p>如果你查 POSIX / Linux API，会发现类似的名字：</p><ul><li><code>CLOCK_MONOTONIC</code>（Linux monotonic clock）≈ C++ <code>steady_clock</code></li><li><code>CLOCK_REALTIME</code>（Linux 实时时钟）≈ C++ <code>system_clock</code></li></ul><p>C++ 标准库作者实际上是<strong>在跨平台封装这些底层时钟</strong>，并且取了更面向程序员的名字。</p><h2 id="q-steady-clock精度如何-实现原理是什么" tabindex="-1"><a class="header-anchor" href="#q-steady-clock精度如何-实现原理是什么"><span>Q:steady clock精度如何，实现原理是什么</span></a></h2><p>下面把你关心的两个点分开讲：<strong>精度（precision/分辨率）到底有多高</strong>、<strong>底层是怎么实现的</strong>。顺手也区分下常被混用的术语：resolution、accuracy、stability。</p><h2 id="精度到底多高" tabindex="-1"><a class="header-anchor" href="#精度到底多高"><span>精度到底多高？</span></a></h2><p>先澄清三个概念：</p><ul><li><strong>Resolution（分辨率）</strong>：时钟“最小刻度”，也就是你能观察到的最小步进；对应 <code>std::chrono::steady_clock::period</code>。</li><li><strong>Accuracy（准确度）</strong>：读数离真实时间间隔的误差。</li><li><strong>Stability/Monotonicity（稳定/单调）</strong>：不会倒退；步进速率基本恒定，不受系统时间调表影响。</li></ul><p>标准只<strong>保证单调（<code>is_steady == true</code>）</strong>，并不规定分辨率是多少；分辨率是<strong>实现相关</strong>的。但在现代平台通常非常细：</p><ul><li><strong>Linux</strong>：通常是纳秒分辨率（<code>period = 1ns</code>），实际可观测精度常在几十纳秒到微秒量级（取决于硬件与内核时序源）。</li><li><strong>Windows</strong>（<code>QueryPerformanceCounter</code>）：典型频率 3–30+ MHz（对应分辨率 ~0.3µs 到 ~30ns），多数现代机型达到 ~0.1µs 甚至更细。</li><li><strong>macOS</strong>（<code>mach_absolute_time</code>）：纳秒刻度，实际精度通常在几十纳秒到微秒量级。</li></ul><blockquote><p>小结：分辨率常见是<strong>纳秒级接口 + 微秒级有效精度</strong>。测应用侧耗时、帧间 Δt、超时等都绰绰有余。</p></blockquote><p>你可以在代码里查看本机分辨率：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;chrono&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;ratio&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::chrono::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">steady_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::boolalpha </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;is_steady=&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> C::is_steady </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;period = &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)C::period::num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> C::period::den </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; seconds per tick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果打印出 <code>1e-9</code> 左右，就是纳秒刻度。</p><h2 id="底层实现原理-跨平台概览" tabindex="-1"><a class="header-anchor" href="#底层实现原理-跨平台概览"><span>底层实现原理（跨平台概览）</span></a></h2><p><code>steady_clock</code> 是标准库对<strong>操作系统“单调时钟”<strong>的封装。不同系统的路线不同，但思想类似：<strong>读一个不会倒退的高频计数器</strong>，用</strong>比例因子</strong>把“tick 数”转换成时间。</p><ul><li><p><strong>Linux</strong>：<code>CLOCK_MONOTONIC</code>（有时是 <code>MONOTONIC_COARSE</code>/<code>MONOTONIC_RAW</code>）</p><ul><li>内核选择一个<strong>time source</strong>（常见：Invariant TSC、HPET、ACPI PM Timer）。</li><li>通过 vDSO 在用户态快速读取，避免系统调用开销。</li><li><strong>NTP/chrony 校时</strong>时会“<strong>slew</strong>（微调速率）”而非跳变，保证单调不回拨；<code>MONOTONIC_RAW</code> 则基本不做校正。</li></ul></li><li><p><strong>Windows</strong>：<code>QueryPerformanceCounter</code>（QPC）</p><ul><li>老系统可能落到 HPET/PMT，现代系统通常用<strong>Invariant TSC</strong>，并做跨核同步与频率稳定性保证。</li><li>提供高频率计数器 + 频率值（<code>QueryPerformanceFrequency</code>）用于换算。</li></ul></li><li><p><strong>macOS</strong>：<code>mach_absolute_time</code></p><ul><li>读取硬件计数器，配合 <code>mach_timebase_info</code> 的分子/分母进行单位换算。</li><li>同样保证单调、不受“挂钟时间”调整影响。</li></ul></li></ul><p>这些实现会处理几个历史痛点：</p><ul><li><strong>跨核 TSC 不同步</strong>：现代 CPU/OS 会做校准或干脆选用 invariant TSC；</li><li><strong>节能/变频影响</strong>：选择<strong>与频率无关</strong>的计数源，或做缩放校正；</li><li><strong>校时跳变</strong>：对“系统时间”执行 <strong>slew</strong> 而不是 step，或采用 raw 源。</li></ul><h2 id="为什么-steady-还能被校时" tabindex="-1"><a class="header-anchor" href="#为什么-steady-还能被校时"><span>为什么“steady”还能被校时？</span></a></h2><p>“steady”指<strong>单调</strong>，不是“完全不被任何算法影响”。像 Linux 的 <code>CLOCK_MONOTONIC</code> 可能因 NTP 采用 ppm 级速率微调（slew，例如 ±500 ppm），<strong>但不会回拨</strong>，也不会突然跳跃。因此测量两个事件的<strong>相对间隔</strong>仍可靠。若你需要“绝对原始的硬件计数”可选 raw（C++ 没直接暴露 raw，但很多实现会让 <code>steady_clock</code> 接近 raw 的行为）。</p><h2 id="实战建议-尤其做引擎-游戏" tabindex="-1"><a class="header-anchor" href="#实战建议-尤其做引擎-游戏"><span>实战建议（尤其做引擎/游戏）</span></a></h2><ul><li><p><strong>帧间 Δt</strong>、<strong>性能采样</strong>、<strong>超时控制</strong> → 统一用 <code>steady_clock</code>。</p></li><li><p>取 Δt 用 <code>duration&lt;double&gt;</code>（秒为单位）最通用：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Clock</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::chrono::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">steady_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t0 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Clock::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... work ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t0).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // seconds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>避免把 <code>system_clock</code> 做差</strong>：系统时间可能被 NTP/用户调整。</p></li><li><p><strong>批量调用开销</strong>：一次帧里别在热路径重复读很多次时钟；读一次传递 Δt 更高效。</p></li><li><p><strong>长时运行漂移</strong>：对物理仿真可做 clamping（例如限制 0.001s–0.05s）来稳住仿真步长。</p></li><li><p><strong>跨平台一致性</strong>：不要硬编码假设“分辨率一定是 1ns”；以 <code>period</code> 为准；在统计里做鲁棒性处理（去极值/中位数）。</p></li></ul><h2 id="一句话总结" tabindex="-1"><a class="header-anchor" href="#一句话总结"><span>一句话总结</span></a></h2><p><code>std::chrono::steady_clock</code> 在现代平台通常提供<strong>纳秒级分辨率、微秒级有效精度</strong>，底层通过<strong>单调硬件计数器 + 比例换算</strong>实现，并通过<strong>slew</strong> 等机制保证不因系统时间调整而回拨。用它测<strong>时间间隔</strong>是跨平台、类型安全且足够精确的最佳实践。</p><h2 id="q-为什么内核刻度可以做到精确的对应到真实世界的1ns或几ns-没有一点偏差" tabindex="-1"><a class="header-anchor" href="#q-为什么内核刻度可以做到精确的对应到真实世界的1ns或几ns-没有一点偏差"><span>Q:为什么内核刻度可以做到精确的对应到真实世界的1ns或几ns,没有一点偏差？</span></a></h2><p>先给结论：<strong>内核/标准库里“纳秒（ns）”是“数值单位/分辨率”，不是对“真实秒”的绝对精准承诺</strong>。<br> 操作系统能返回以 ns 表示的时间，是因为做了<strong>比例换算</strong>；但<strong>频率误差、温度漂移、量化与舍入</strong>等都会带来偏差。换句话说：API 可以给你“到纳秒的读数”，但它不是“绝对没有一点误差的纳秒”。</p><h2 id="为什么看起来能到-ns" tabindex="-1"><a class="header-anchor" href="#为什么看起来能到-ns"><span>为什么看起来能到 ns？</span></a></h2><p>底层都有个“单调计数器”（TSC/HPET/PMT/mach counter）。内核维护比例系数，把“计数器 tick”换算成 ns：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>delta_cycles = cycles_now - cycles_base</span></span>\n<span class="line"><span>ns = ns_base + ((delta_cycles * mult) &gt;&gt; shift)   // 整数定点换算</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>freq</code> 是计数器实际频率（例如 3.2 GHz、14.318 MHz）。</li><li><code>mult ≈ 1e9 * 2^shift / freq</code>。</li><li>表面上你得到“纳秒级”的整数结果，但这是<strong>数学映射</strong>，不是“硬件真的每 1ns 跳一次”。</li></ul><h2 id="误差从哪来" tabindex="-1"><a class="header-anchor" href="#误差从哪来"><span>误差从哪来？</span></a></h2><ol><li><p><strong>频率误差（ppm 级）</strong><br> 晶振都会偏（温度、老化、电压）。10–50 ppm 很常见：</p><ul><li>50 ppm ⇒ 每秒误差 50 微秒；1 小时累计 ~0.18 s。<br> OS 会估计并校准，但<strong>不会变成零</strong>。</li></ul></li><li><p><strong>校时/驯服（slew/discipline）</strong><br> NTP/chrony/PTP 会把“频率偏差”调成更接近 1 秒=1e9 ns，方法是<strong>微调走时速率</strong>（±几百 ppm），确保<strong>单调不回拨</strong>（steady），但仍是<strong>近似</strong>。</p></li><li><p><strong>量化与舍入</strong></p><ul><li>计数器本身的步进不一定是 1ns（比如 HPET ~70ns 一跳，PMT ~279ns）。</li><li>定点换算会有舍入误差（通常做成长期零均值，但瞬时有 ±1ns 量级抖动）。</li></ul></li><li><p><strong>跨核/节能影响</strong><br> 现代 CPU 提供 <strong>Invariant TSC</strong> 并做跨核同步，但历史/某些平台仍可能有极小相位差，需要内核校正。</p></li><li><p><strong>读取抖动</strong><br> 读计数器本身也要几到几十纳秒，路径不同（系统调用 vs vDSO/用户态）会带来<strong>读数噪声</strong>。</p></li></ol><h2 id="现实能有多准" tabindex="-1"><a class="header-anchor" href="#现实能有多准"><span>现实能有多准？</span></a></h2><ul><li><strong>不对时</strong>：靠本机晶振，误差常见 10–50 ppm。</li><li><strong>NTP（公网）</strong>：一般 1–10 ms 量级对 UTC 的准确度。</li><li><strong>NTP/chrony（良好局域网）</strong>：几十到几百微秒。</li><li><strong>PTP（IEEE 1588）+ 网卡硬件时间戳</strong>：亚微秒到十几纳秒（数据中心典型做法）。</li><li><strong>GPSDO（1PPS 驯服本地振荡器）</strong>：可把本机频率拉到 10⁻¹¹ 量级，做到“对真秒”的纳秒级，但这需要专用硬件与时钟树设计，不是普通 PC。</li></ul><h2 id="和-steady-clock-的关系" tabindex="-1"><a class="header-anchor" href="#和-steady-clock-的关系"><span>和 <code>steady_clock</code> 的关系</span></a></h2><p><code>steady_clock</code> 只承诺<strong>单调</strong>和<strong>相对间隔稳定</strong>（非常适合测耗时、Δt、超时）。<br> 它<strong>不</strong>承诺“对真实世界的秒绝对无偏差”。数字显示“ns”≠ 物理意义上的“无误差纳秒”。</p><h2 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr"><span>TL;DR</span></a></h2><ul><li>“ns”是<strong>分辨率与表示</strong>，不是“绝对准确度”。</li><li>OS 通过<strong>计数器 + 定点比例换算 +（可选）对时驯服</strong>提供时间。</li><li>任何通用平台都会有<strong>ppm 级频率误差与量化误差</strong>；可以被 NTP/PTP 等<strong>显著减小</strong>，但不会神奇地变成“没有一点偏差”。</li><li>做游戏/引擎的<strong>时间差</strong>测量用 <code>steady_clock</code> 已经非常可靠；若你要和 UTC 贴到亚微秒/纳秒，得上 <strong>PTP/GPSDO/硬件时间戳</strong>这类专用方案。</li></ul><h2 id="q-什么是hz。典型频率-3–30-mhz为什么对应到分辨率-0-3μs-到-30ns" tabindex="-1"><a class="header-anchor" href="#q-什么是hz。典型频率-3–30-mhz为什么对应到分辨率-0-3μs-到-30ns"><span>Q:什么是Hz。典型频率 3–30+ MHz为什么对应到分辨率 ~0.3µs 到 ~30ns</span></a></h2><p>简短说法：<strong>Hz（赫兹）= 每秒的“次数/周期数”</strong>。频率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 和单次周期时长（周期、刻度） <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 的关系是</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">T=\\frac{1}{f} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>用微秒/纳秒写就是：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>μ</mi><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mn>10</mn><mn>6</mn></msup><mrow><mi>f</mi><mo stretchy="false">(</mo><mtext>Hz</mtext><mo stretchy="false">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">T(\\mu s)=\\dfrac{10^6}{f(\\text{Hz})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord text"><span class="mord">Hz</span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mn>10</mn><mn>9</mn></msup><mrow><mi>f</mi><mo stretchy="false">(</mo><mtext>Hz</mtext><mo stretchy="false">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">T(ns)=\\dfrac{10^9}{f(\\text{Hz})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord text"><span class="mord">Hz</span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>所以一个计数器的<strong>频率</strong>越高，它每“跳”一次的<strong>最小时间步长</strong>（也就是分辨率）就越小。</p><h3 id="例子-为什么-3–30-mhz-≈-0-3μs–30ns" tabindex="-1"><a class="header-anchor" href="#例子-为什么-3–30-mhz-≈-0-3μs–30ns"><span>例子（为什么 3–30+ MHz ≈ 0.3µs–30ns）</span></a></h3><ul><li><strong>3 MHz</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><msup><mn>10</mn><mn>9</mn></msup><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><msup><mn>10</mn><mn>6</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mn>1000</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo>≈</mo><mn>333.33</mn></mrow><annotation encoding="application/x-tex">T = 10^9 / (3\\times10^6) = 1000/3 \\approx 333.33</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">333.33</span></span></span></span> ns <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span></span></span></span> <strong>0.333 µs</strong>（≈ 0.3 µs）</li><li><strong>10 MHz</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><msup><mn>10</mn><mn>9</mn></msup><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>10</mn><mo>×</mo><msup><mn>10</mn><mn>6</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mn>1000</mn><mi mathvariant="normal">/</mi><mn>10</mn><mo>=</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">T = 10^9 / (10\\times10^6) = 1000/10 = 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span> ns</li><li><strong>30 MHz</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><msup><mn>10</mn><mn>9</mn></msup><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>30</mn><mo>×</mo><msup><mn>10</mn><mn>6</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mn>1000</mn><mi mathvariant="normal">/</mi><mn>30</mn><mo>≈</mo><mn>33.33</mn></mrow><annotation encoding="application/x-tex">T = 10^9 / (30\\times10^6) = 1000/30 \\approx 33.33</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord">30</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">33.33</span></span></span></span> ns（≈ <strong>30 ns</strong>）</li></ul><p>再给几个常见计时源方便对比：</p><table><thead><tr><th>频率</th><th>单步分辨率（周期）</th></tr></thead><tbody><tr><td>3.579545 MHz（ACPI PMT）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mi mathvariant="normal">/</mi><mn>3.579545</mn><mo>≈</mo><mn>279.4</mn></mrow><annotation encoding="application/x-tex">1000/3.579545 \\approx 279.4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/3.579545</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">279.4</span></span></span></span> ns</td></tr><tr><td>14.31818 MHz（HPET 常见）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mi mathvariant="normal">/</mi><mn>14.31818</mn><mo>≈</mo><mn>69.8</mn></mrow><annotation encoding="application/x-tex">1000/14.31818 \\approx 69.8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/14.31818</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">69.8</span></span></span></span> ns</td></tr><tr><td>19.2 MHz</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mi mathvariant="normal">/</mi><mn>19.2</mn><mo>≈</mo><mn>52.08</mn></mrow><annotation encoding="application/x-tex">1000/19.2 \\approx 52.08</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/19.2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">52.08</span></span></span></span> ns</td></tr><tr><td>25 MHz</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mi mathvariant="normal">/</mi><mn>25</mn><mo>=</mo><mn>40</mn></mrow><annotation encoding="application/x-tex">1000/25 = 40</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000/25</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">40</span></span></span></span> ns</td></tr></tbody></table><blockquote><p>注意：这是<strong>时间分辨率/量化步长</strong>，并不等于对“真实秒”的<strong>绝对准确度</strong>；准确度还会受晶振 ppm 级误差、温度漂移、对时校正（NTP/PTP 的 slew）、读数抖动等影响。但做耗时测量/Δt 统计，这样的分辨率已经非常充足。</p></blockquote><h2 id="q-计算机cpu能达到mhz-ghz的原因" tabindex="-1"><a class="header-anchor" href="#q-计算机cpu能达到mhz-ghz的原因"><span>Q:计算机CPU能达到MHz，GHz的原因？</span></a></h2><p>好的，那我用<strong>最简单的电气原理</strong>角度来讲，不掺现代制造工艺的细节。</p><hr><h2 id="_1-计算机为什么需要-时钟" tabindex="-1"><a class="header-anchor" href="#_1-计算机为什么需要-时钟"><span>1. 计算机为什么需要“时钟”</span></a></h2><ul><li><p>计算机本质是<strong>一堆逻辑电路（门电路、触发器、寄存器）</strong>。</p></li><li><p>门电路在信号输入变化后需要一个时间才能稳定输出（传播延迟 propagation delay）。</p></li><li><p>为了让所有部件在<strong>节拍一致的情况下</strong>可靠工作，需要一个统一的“节拍器”告诉大家：</p><blockquote><p>现在采样输入 → 稍等传播 → 下个节拍更新结果</p></blockquote></li><li><p>这个“节拍器”就是<strong>时钟信号</strong>。</p></li></ul><hr><h2 id="_2-高频时钟的最基本原理" tabindex="-1"><a class="header-anchor" href="#_2-高频时钟的最基本原理"><span>2. 高频时钟的最基本原理</span></a></h2><p>早在 50–60 年代，就有能产生 MHz 级稳定时钟的技术：<strong>晶体振荡器（Crystal Oscillator）</strong></p><ul><li>石英晶体在特定切割角度下有压电效应，可以在固定频率下机械振动。</li><li>机械振动频率非常稳定（几十 ppm 级别）。</li><li>把晶体接到放大电路里，可以形成一个<strong>稳定的正弦波或方波输出</strong>。</li><li>通过分频或倍频，可以得到想要的 CPU 时钟。</li></ul><p>所以理论上，只要逻辑电路能跟得上，时钟可以做到很高。</p><hr><h2 id="_3-为什么-1970-年代是几-mhz" tabindex="-1"><a class="header-anchor" href="#_3-为什么-1970-年代是几-mhz"><span>3. 为什么 1970 年代是几 MHz</span></a></h2><ul><li>当时的<strong>晶体振荡器</strong>能做到几十 MHz 甚至更高（比如无线电、雷达也用 MHz 级频率）。</li><li>但 CPU <strong>不能直接用那么高的频率</strong>，因为逻辑电路速度有限（传播延迟大）。</li><li>所以 1970 年代的微处理器（如 Intel 4004）只能跑几百 kHz 到几 MHz，限制来自逻辑速度，不是时钟源。</li></ul><hr><h2 id="_4-今天的-ghz-和-1960-年代的关系" tabindex="-1"><a class="header-anchor" href="#_4-今天的-ghz-和-1960-年代的关系"><span>4. 今天的 GHz 和 1960 年代的关系</span></a></h2><p>从<strong>体系架构的基本原理</strong>来说：</p><ul><li>依然是：逻辑门电路 + 寄存器 + 全局时钟信号</li><li>时钟依然来自<strong>晶体振荡器</strong>（只是现代用更小的封装、温补、高稳定度）。</li><li>内部依然用<strong>触发器在时钟沿采样数据</strong>。</li></ul><p>变化主要在：</p><ol><li><strong>电路速度</strong>：逻辑延迟变小（晶体管切换快），可以在更短的周期内完成一次操作。</li><li><strong>流水线和并行度</strong>：减少单个周期的逻辑工作量，让时钟周期可以更短。</li><li><strong>时钟生成方式</strong>：现在晶体振荡器输出基准（几十 MHz），再用 PLL 倍频到几 GHz。</li></ol><hr><p>✅ <strong>最根本的理论基础没变</strong></p><ul><li>1960 年和今天 CPU 都依赖<strong>统一的时钟脉冲</strong>驱动同步逻辑。</li><li>核心原理是：<strong>时钟决定数据什么时候被寄存器采样，保证电路按节拍工作</strong>。</li><li>区别是：今天的电路能在更短时间稳定下来，所以时钟可以更快。</li></ul><h2 id="q-那衍生出另一个问题-世界utc时间-全世界都要用的时间。怎么确保它是和真实宇宙时间是一致的。我们怎么确保这个统一刻度的正确性" tabindex="-1"><a class="header-anchor" href="#q-那衍生出另一个问题-世界utc时间-全世界都要用的时间。怎么确保它是和真实宇宙时间是一致的。我们怎么确保这个统一刻度的正确性"><span>Q:那衍生出另一个问题，世界UTC时间，全世界都要用的时间。怎么确保它是和<strong>真实</strong>宇宙时间是一致的。我们怎么确保这个统一刻度的正确性？</span></a></h2><p>你这个问题其实已经跳到<strong>计时科学的最底层</strong>了，<br> 就是：<strong>“我们如何保证 UTC 这个全人类共享的时间刻度是真实的、统一的？”</strong><br> 答案是：它是靠<strong>原子钟网络 + 天文观测 + 国际协调机构</strong>共同维护的。</p><hr><h2 id="_1-utc-是什么" tabindex="-1"><a class="header-anchor" href="#_1-utc-是什么"><span>1. UTC 是什么</span></a></h2><ul><li><strong>UTC（Coordinated Universal Time）</strong> 是世界上统一的“挂钟时间”标准。</li><li>它是通过<strong>国际原子时（TAI）<strong>加上</strong>闰秒</strong>形成的。</li><li><strong>TAI</strong> 是纯粹的原子钟秒数累加（不考虑地球自转），<strong>UTC</strong> 会适当加入闰秒让它跟地球自转保持一致。</li></ul><hr><h2 id="_2-秒-的定义" tabindex="-1"><a class="header-anchor" href="#_2-秒-的定义"><span>2. “秒”的定义</span></a></h2><p>既然一切时间刻度都基于“秒”，我们必须先定义秒：</p><ul><li>自 1967 年起，国际单位制（SI）规定：</li></ul><blockquote><p>1 秒 = 铯-133 原子基态两个超精细能级间跃迁 <strong>9,192,631,770 次振荡</strong>的持续时间。</p></blockquote><ul><li>这就是<strong>原子秒</strong>，它与地球自转无关，是物理上极稳定的刻度。</li></ul><hr><h2 id="_3-如何保持全球一致" tabindex="-1"><a class="header-anchor" href="#_3-如何保持全球一致"><span>3. 如何保持全球一致</span></a></h2><p>全球有一个 <strong>国际原子钟网络</strong>：</p><ol><li><p><strong>数百台原子钟</strong>（铯钟、氢钟、光钟）分布在各国的计量研究机构（美国 NIST、日本 NICT、中国国家授时中心、德国 PTB 等）。</p></li><li><p>这些钟通过：</p><ul><li>卫星链路（GPS、GLONASS、双向卫星时间传递 TWSTFT）</li><li>光纤网络</li><li>微波链路<br> 来相互比对频率和相位差。</li></ul></li><li><p>数据送到 <strong>BIPM（国际计量局）</strong> 汇总，计算加权平均，得到 <strong>TAI（国际原子时）</strong>。</p></li><li><p>TAI 加上必要的闰秒调整，发布成 <strong>UTC</strong>。</p></li></ol><hr><h2 id="_4-保证和-真实宇宙时间-一致" tabindex="-1"><a class="header-anchor" href="#_4-保证和-真实宇宙时间-一致"><span>4. 保证和“真实宇宙时间”一致</span></a></h2><ul><li><p><strong>短期稳定性</strong>：靠原子钟的极高频率稳定度（好到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mrow><mo>−</mo><mn>15</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> 甚至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mrow><mo>−</mo><mn>18</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">18</span></span></span></span></span></span></span></span></span></span></span></span>）。</p></li><li><p><strong>长期对准地球时间</strong>：</p><ul><li>地球自转有轻微不稳定（受潮汐、地核流动、大气变化等影响）。</li><li>通过天文观测（VLBI、卫星激光测距、GPS 地面站）监测地球自转和轨道变化。</li><li>如果原子时和地球自转时间差超过 0.9 秒，就由 **IERS（国际地球自转和参考系统服务）**宣布插入或删除一个闰秒。</li></ul></li><li><p>这样既保持了<strong>短期精度</strong>（原子钟不漂），又保持了<strong>长期对齐</strong>（不和地球自转脱节）。</p></li></ul><hr><h2 id="_5-总结成一句话" tabindex="-1"><a class="header-anchor" href="#_5-总结成一句话"><span>5. 总结成一句话</span></a></h2><p><strong>UTC 是“原子钟网络”提供的极稳定秒长，通过国际比对保持全球一致，并通过天文测量地球自转来加闰秒，使它和“人类感知的天文时间”保持同步。</strong></p>',123)),(0,t.Lk)("h2",p,[(0,t.Lk)("a",r,[(0,t.Lk)("span",null,[a[2]||(a[2]=(0,t.eW)("[例子]std")),(0,t.bF)(n,{icon:"chrono"}),a[3]||(a[3]=(0,t.eW)("steady_clock::now()返回的是什么？"))])])]),a[8]||(a[8]=(0,t.Fv)('<p><img src="'+i+'" alt="" loading="lazy"><br> 你截图里 <code>now</code> 和 <code>last</code> 这两个长整型数，其实是<br><code>std::chrono::time_point&lt;std::chrono::steady_clock&gt;</code> 内部存的<strong>duration</strong>（时间间隔），<br> 单位是 <code>steady_clock::duration::period</code>（在 MSVC 下通常是纳秒）。</p><hr><h3 id="_1-这串数的含义" tabindex="-1"><a class="header-anchor" href="#_1-这串数的含义"><span>1. 这串数的含义</span></a></h3><p>在 MSVC 的实现里：</p><ul><li><code>time_point</code> 里有一个 <code>_d</code> 成员（duration）</li><li><code>_d</code> 里有一个 <code>__r</code>（representation type，通常是 <code>long long</code>）</li><li>这个 <code>__r</code> 就是<strong>从某个实现定义的起点（epoch）到当前时刻的 tick 数</strong><br> tick 单位一般是<strong>纳秒</strong>（1 tick = 1ns）</li></ul><p>举个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>now.__r  = 250,685,633,516,400 ns</span></span>\n<span class="line"><span>last.__r = 250,683,652,671,000 ns</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两者相差：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>250,685,633,516,400 - 250,683,652,671,000 = 1,980,845,400 ns</span></span>\n<span class="line"><span>≈ 1.9808454 秒</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是你 <code>frame</code> 变量里 1.9808454 的来源。</p><hr><h3 id="_2-为什么数字这么大" tabindex="-1"><a class="header-anchor" href="#_2-为什么数字这么大"><span>2. 为什么数字这么大</span></a></h3><ul><li><p>因为这个时间点不是从 0 开始，而是从**某个固定的纪元（epoch）**开始计的。</p></li><li><p>对于 <code>steady_clock</code>，这个纪元是实现定义的，比如：</p><ul><li>程序启动时刻</li><li>系统启动时间</li><li>或者是一个固定的硬件计数器起点</li></ul></li><li><p>所以这个值看起来很大，但实际只在做<strong>差值</strong>时才有意义。</p></li></ul><hr><h3 id="_3-关键点" tabindex="-1"><a class="header-anchor" href="#_3-关键点"><span>3. 关键点</span></a></h3><ul><li><strong>单位</strong>：MSVC 下 <code>steady_clock::duration</code> 是纳秒（<code>std::nano</code>）。</li><li><strong>绝对值无意义</strong>：只有 <code>(now - last)</code> 这种差值有实际用途。</li><li><strong>来源</strong>：内部读取单调硬件计数器（如 Windows 的 <code>QueryPerformanceCounter</code>），按频率换算成纳秒整数。</li></ul>',16))])}]]),c=JSON.parse('{"path":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/C__%E6%97%B6%E9%92%9F.html","title":"C++时钟","lang":"zh-CN","frontmatter":{"date":"2025-08-13T00:00:00.000Z","tag":["AI_GEN"],"description":"C++时钟 Q:C++时钟的精度如何，提供时钟的原理是什么？ TLDR： C++ chrono 能提供 ns 级别的稳定计时，是因为计算机硬件中有晶体振荡器(Crystal Oscillator) 提供 ppm(parts per million(百万分之一)) 稳定度的基准频率，硬件计数器以这个频率递增。现代 CPU 可通过固定频率或倍频生成高频计数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++时钟\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-13T15:53:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/C__%E6%97%B6%E9%92%9F.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"C++时钟"}],["meta",{"property":"og:description","content":"C++时钟 Q:C++时钟的精度如何，提供时钟的原理是什么？ TLDR： C++ chrono 能提供 ns 级别的稳定计时，是因为计算机硬件中有晶体振荡器(Crystal Oscillator) 提供 ppm(parts per million(百万分之一)) 稳定度的基准频率，硬件计数器以这个频率递增。现代 CPU 可通过固定频率或倍频生成高频计数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-13T15:53:01.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:published_time","content":"2025-08-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-13T15:53:01.000Z"}]]},"git":{"createdTime":1755100381000,"updatedTime":1755100381000,"contributors":[{"name":"runner2011","username":"runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/runner2011"}]},"readingTime":{"minutes":16.53,"words":4959},"filePathRelative":"posts/计算机基础/计算机体系结构/C++时钟.md","excerpt":"\\n<h2>Q:C++时钟的精度如何，提供时钟的原理是什么？</h2>\\n<p>TLDR：<br>\\nC++ chrono 能提供 ns 级别的稳定计时，是因为计算机硬件中有<strong>晶体振荡器(Crystal Oscillator)</strong> 提供 <strong>ppm(parts per million(百万分之一))</strong> 稳定度的基准频率，硬件计数器以这个频率递增。现代 CPU 可通过固定频率或倍频生成高频计数源，通过计数周期数并结合频率换算，得到高分辨率的时间值。steady_clock 使用这种硬件计数器来保证单调和高分辨率，但它的 ns 只是表示精细的刻度，不代表与真实物理秒的绝对偏差为 0。</p>","autoDesc":true}')}}]);