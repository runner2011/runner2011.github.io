"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[3003],{3206:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var t=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="map-映射-和set-集合" tabindex="-1"><a class="header-anchor" href="#map-映射-和set-集合"><span>Map(映射)和Set(集合)</span></a></h1><p>简单说：</p><p>哈希表实现Map通过哈希函数将键（key）映射到一个哈希值（通常是数组索引），在对应索引位置存储键值对（key-value pair）。如果发生哈希冲突（多个键映射到同一索引），通常通过链表或红黑树（Java 8+）解决。</p><p>哈希表实现 Set 的方式类似 Map，但只存储元素（相当于 Map 的键），没有值（value）</p><hr><p>在数据结构中，Map 和 Set 是两种常见的高级数据结构，通常用于存储和操作数据。以下是它们的主要区别，用简洁的方式说明：</p><p>1. 定义</p><ul><li><p>Map：键值对（key-value pair）的集合，键是唯一的，值可以重复。用于存储键到值的映射关系。</p><ul><li>示例：{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25}，键是 &quot;name&quot; 和 &quot;age&quot;，值是 &quot;Alice&quot; 和 25。</li></ul></li><li><p>Set：唯一元素的集合，无键值对概念，元素不可重复。</p><ul><li>示例：{1, 2, 3}，每个元素只出现一次。</li></ul></li></ul><p>2. 存储内容</p><ul><li>Map：存储的是键值对，键用于快速查找对应的值。</li><li>Set：只存储元素本身，没有键值对。</li></ul><p>3. 重复性</p><ul><li>Map：键（key）必须唯一，值（value）可以重复。</li><li>Set：所有元素必须唯一，重复元素会被自动去重。</li></ul><p>4. 用途</p><ul><li><p>Map：适合需要通过键快速查找值的情况，如字典、哈希表。</p><ul><li>示例：查询用户ID对应的用户信息。</li></ul></li><li><p>Set：适合需要确保元素唯一性或快速检查元素是否存在的情况。</p><ul><li>示例：存储一组不重复的标签。</li></ul></li></ul><p>5. 操作</p><ul><li><p>Map：</p><ul><li>添加：map.put(key, value) 或 map[key] = value</li><li>查找：map.get(key) 或 map[key]</li><li>删除：map.remove(key)</li><li>检查键是否存在：map.containsKey(key)</li></ul></li><li><p>Set：</p><ul><li>添加：set.add(element)</li><li>查找：set.contains(element)</li><li>删除：set.remove(element)</li><li>无键值对操作，仅操作元素。</li></ul></li></ul><p>6. 实现方式</p><ul><li>Map：常见实现包括哈希表（HashMap）、树（TreeMap，基于红黑树）。</li><li>Set：常见实现包括哈希集合（HashSet）、树集合（TreeSet，基于红黑树）。</li></ul><p>7. 性能</p><ul><li>Map 和 Set 在哈希实现（如 HashMap 和 HashSet）中，增删查操作的平均时间复杂度为 O(1)。</li><li>在树实现（如 TreeMap 和 TreeSet）中，操作的时间复杂度通常为 O(log n)。</li><li>Set 通常比 Map 更轻量，因为它只存储单一元素。</li></ul><p>8. 典型场景</p><ul><li><p>Map：</p><ul><li>缓存系统（键是查询条件，值是结果）。</li><li>数据库索引（字段名到值的映射）。</li></ul></li><li><p>Set：</p><ul><li>去重（如存储唯一用户 ID）。</li><li>快速检查元素存在性（如权限列表）。</li></ul></li></ul><p>示例（以 Java 为例）</p><p>java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Map 示例</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: 25</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Set 示例</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Set</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> set </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 重复元素不会添加</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><ul><li>Map 适合键值对映射，键唯一，值可重复。</li><li>Set 适合存储唯一元素，无键值对。 选择哪种结构取决于你的需求：需要键值关联用 Map，只需要唯一元素用 Set。</li></ul><hr><p>Q:为什么用红黑树实现map和set，和用hash table实现有什么区别</p><p>红黑树和哈希表（Hash Table）是两种不同的数据结构，分别适用于不同的场景。C++ 的 <code>std::map</code>/<code>std::set</code>（基于红黑树）和 <code>std::unordered_map</code>/<code>std::unordered_set</code>（基于哈希表）的主要区别如下：</p><hr><h3 id="_1-底层数据结构" tabindex="-1"><a class="header-anchor" href="#_1-底层数据结构"><span><strong>1. 底层数据结构</strong></span></a></h3><ul><li><p><strong>红黑树（RB-Tree）</strong></p><ul><li>平衡二叉搜索树，保证 <strong>O(log n)</strong> 的查找、插入、删除时间复杂度。</li><li>数据按**有序（排序）**方式存储（默认按 <code>&lt;</code> 比较，或自定义比较函数）。</li></ul></li><li><p><strong>哈希表（Hash Table）</strong></p><ul><li>基于数组 + 哈希函数 + 冲突解决（如链地址法）。</li><li>平均 <strong>O(1)</strong> 的查找、插入、删除时间复杂度（最坏情况 <strong>O(n)</strong>，如哈希冲突严重时）。</li><li>数据<strong>无序</strong>存储（遍历顺序不确定）。</li></ul></li></ul><hr><h3 id="_2-关键区别" tabindex="-1"><a class="header-anchor" href="#_2-关键区别"><span><strong>2. 关键区别</strong></span></a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>红黑树（map/set）</strong></th><th><strong>哈希表（unordered_map/unordered_set）</strong></th></tr></thead><tbody><tr><td><strong>有序性</strong></td><td>数据自动排序（支持范围查询）</td><td>数据无序</td></tr><tr><td><strong>时间复杂度</strong></td><td>稳定 O(log n)</td><td>平均 O(1)，最坏 O(n)</td></tr><tr><td><strong>空间开销</strong></td><td>较小（仅存储指针和颜色标志）</td><td>较大（需预分配桶，可能有空桶）</td></tr><tr><td><strong>哈希函数依赖</strong></td><td>不需要，依赖比较函数（如 <code>&lt;</code>）</td><td>需要良好的哈希函数</td></tr><tr><td><strong>稳定性</strong></td><td>性能稳定（无哈希冲突问题）</td><td>受哈希函数影响，可能退化</td></tr><tr><td><strong>适用场景</strong></td><td>需要有序数据或范围查询</td><td>需要快速单点查询，不关心顺序</td></tr></tbody></table><hr><h3 id="_3-如何选择" tabindex="-1"><a class="header-anchor" href="#_3-如何选择"><span><strong>3. 如何选择？</strong></span></a></h3><ul><li><p><strong>用红黑树（<code>map/set</code>）的情况</strong>：</p><ul><li>需要数据<strong>有序</strong>（如按 key 排序遍历）。</li><li>需要稳定的 <strong>O(log n)</strong> 性能（避免哈希表的最坏 O(n)）。</li><li>支持<strong>范围查询</strong>（如 <code>lower_bound()</code>、<code>upper_bound()</code>）。</li></ul></li><li><p><strong>用哈希表（<code>unordered_map/unordered_set</code>）的情况</strong>：</p><ul><li>只需<strong>快速查找/插入</strong>，不关心顺序。</li><li>哈希函数质量高，冲突少（如整数、字符串等简单 key）。</li><li>内存充足，能接受哈希表的额外空间开销。</li></ul></li></ul><hr><h3 id="_4-例子对比" tabindex="-1"><a class="header-anchor" href="#_4-例子对比"><span><strong>4. 例子对比</strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;map&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unordered_map&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, std::string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rb_map;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 红黑树实现，key 按升序排列</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rb_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;three&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rb_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;one&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历输出：1 → 3（有序）</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::unordered_map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, std::string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hash_map;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 哈希表实现，无序</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hash_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;three&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hash_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;one&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历输出顺序不确定（可能是 3 → 1 或 1 → 3）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ul><li><strong>红黑树</strong>：有序性 + 稳定性能，适合需要排序或范围操作的场景。</li><li><strong>哈希表</strong>：极速查询 + 无序存储，适合单点访问密集的场景。</li></ul><p>实际选择取决于需求（是否要求有序、是否容忍哈希冲突等）。</p><hr><p>Q:感觉用红黑树优点更多，用hash table实现有点是什么</p><p>虽然红黑树（RB-Tree）在<strong>有序性</strong>和<strong>最坏情况性能</strong>上更优，但哈希表（Hash Table）仍然在许多场景下具有不可替代的优势。以下是哈希表的核心优点，以及它比红黑树更适合的情况：</p><hr><h3 id="_1-平均时间复杂度-o-1-远超红黑树的-o-log-n" tabindex="-1"><a class="header-anchor" href="#_1-平均时间复杂度-o-1-远超红黑树的-o-log-n"><span><strong>1. 平均时间复杂度 O(1)，远超红黑树的 O(log n)</strong></span></a></h3><ul><li><strong>哈希表</strong>在理想情况下（哈希函数均匀、冲突少），<strong>查找、插入、删除都是 O(1)</strong>，比红黑树的 O(log n) <strong>快得多</strong>。 <ul><li>例如：在 100 万个数据中查找，哈希表可能只需 1 次计算，而红黑树需要约 20 次比较（log₂10⁶ ≈ 20）。</li></ul></li><li><strong>红黑树</strong>的 O(log n) 虽然稳定，但在数据量极大时，仍比哈希表慢。</li></ul><hr><h3 id="_2-无需比较操作-适合复杂-key-或无自然序的数据" tabindex="-1"><a class="header-anchor" href="#_2-无需比较操作-适合复杂-key-或无自然序的数据"><span><strong>2. 无需比较操作，适合复杂 Key 或无自然序的数据</strong></span></a></h3><ul><li><strong>哈希表</strong>依赖哈希函数，不要求 Key 具备可比较性（例如，自定义结构体只需实现哈希函数）。 <ul><li>比如：用 <code>std::unordered_map&lt;std::pair&lt;int, int&gt;, int&gt;</code>，只需为 <code>pair</code> 定义哈希函数。</li></ul></li><li><strong>红黑树</strong>要求 Key 必须支持严格弱序（如 <code>&lt;</code> 运算符），否则无法排序。 <ul><li>若 Key 是无序的（如经纬度坐标、网络套接字），红黑树难以直接使用。</li></ul></li></ul><hr><h3 id="_3-内存局部性更好-对缓存友好" tabindex="-1"><a class="header-anchor" href="#_3-内存局部性更好-对缓存友好"><span><strong>3. 内存局部性更好（对缓存友好）</strong></span></a></h3><ul><li><strong>哈希表</strong>的数据通常存储在连续数组中（桶 + 链表/开放寻址），遍历时<strong>缓存命中率更高</strong>。</li><li><strong>红黑树</strong>是指针结构（节点分散在内存中），<strong>缓存不友好</strong>，尤其在数据量大时性能下降明显。</li></ul><hr><h3 id="_4-实现简单-无需复杂平衡操作" tabindex="-1"><a class="header-anchor" href="#_4-实现简单-无需复杂平衡操作"><span><strong>4. 实现简单，无需复杂平衡操作</strong></span></a></h3><ul><li><strong>哈希表</strong>的核心是哈希函数和冲突解决（如链地址法），逻辑简单。</li><li><strong>红黑树</strong>需要维护颜色、旋转、递归调整等复杂规则，实现难度高。</li></ul><hr><h3 id="_5-特定场景下空间利用率更高" tabindex="-1"><a class="header-anchor" href="#_5-特定场景下空间利用率更高"><span><strong>5. 特定场景下空间利用率更高</strong></span></a></h3><ul><li>当数据量已知且哈希函数设计良好时，哈希表可以<strong>预分配桶</strong>，减少内存碎片。</li><li>红黑树每个节点需存储颜色、指针等额外信息，空间开销相对较大。</li></ul><hr><h3 id="哈希表的适用场景" tabindex="-1"><a class="header-anchor" href="#哈希表的适用场景"><span><strong>哈希表的适用场景</strong></span></a></h3><ol><li><strong>高频单点查询</strong>（如缓存、字典、数据库索引）。 <ul><li>例如：Redis、Python 的 <code>dict</code>、C++ 的 <code>std::unordered_map</code>。</li></ul></li><li><strong>Key 无序或难以排序</strong>（如 UUID、哈希值）。</li><li><strong>内存充足，追求极致速度</strong>（如游戏引擎、实时系统）。</li></ol><hr><h3 id="什么时候用红黑树" tabindex="-1"><a class="header-anchor" href="#什么时候用红黑树"><span><strong>什么时候用红黑树？</strong></span></a></h3><ul><li>需要<strong>有序遍历</strong>或<strong>范围查询</strong>（如 <code>map.lower_bound(key)</code>）。</li><li>无法接受哈希表的<strong>最坏 O(n)</strong> 性能（如实时系统要求严格延迟上限）。</li><li>Key 必须排序（如输出排行榜、时间序列数据）。</li></ul><hr><h3 id="代码示例对比" tabindex="-1"><a class="header-anchor" href="#代码示例对比"><span><strong>代码示例对比</strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 哈希表：O(1) 查找，但无序</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::unordered_map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, std::string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hash_map;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hash_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fast&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> hash_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 平均 O(1)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 红黑树：O(log n) 查找，但有序</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, std::string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rb_map;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rb_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;slow but ordered&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rb_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 稳定 O(log n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span><strong>总结</strong></span></a></h3><table><thead><tr><th><strong>需求</strong></th><th><strong>选择哈希表</strong></th><th><strong>选择红黑树</strong></th></tr></thead><tbody><tr><td>需要极速查找/插入</td><td>✅ 平均 O(1)</td><td>❌ O(log n)</td></tr><tr><td>数据需要有序</td><td>❌ 无序</td><td>✅ 自动排序</td></tr><tr><td>内存有限</td><td>❌ 可能有空桶浪费空间</td><td>✅ 节点式存储，空间紧凑</td></tr><tr><td>避免最坏 O(n)</td><td>❌ 哈希冲突时退化</td><td>✅ 稳定 O(log n)</td></tr><tr><td>Key 不可比较</td><td>✅ 只需哈希函数</td><td>❌ 需定义 <code>&lt;</code> 或比较函数</td></tr></tbody></table><p><strong>结论</strong>：哈希表在纯查找场景下性能碾压红黑树，但红黑树在有序性和稳定性上不可替代。两者互补，根据需求选择即可。</p>',77)]))}]]),h=JSON.parse('{"path":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/Map(%E6%98%A0%E5%B0%84)%E5%92%8CSet(%E9%9B%86%E5%90%88).html","title":"Map(映射)和Set(集合)","lang":"zh-CN","frontmatter":{"tag":["AI_GEN"],"description":"Map(映射)和Set(集合) 简单说： 哈希表实现Map通过哈希函数将键（key）映射到一个哈希值（通常是数组索引），在对应索引位置存储键值对（key-value pair）。如果发生哈希冲突（多个键映射到同一索引），通常通过链表或红黑树（Java 8+）解决。 哈希表实现 Set 的方式类似 Map，但只存储元素（相当于 Map 的键），没有值（v...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Map(映射)和Set(集合)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-08T03:01:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/Map(%E6%98%A0%E5%B0%84)%E5%92%8CSet(%E9%9B%86%E5%90%88).html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"Map(映射)和Set(集合)"}],["meta",{"property":"og:description","content":"Map(映射)和Set(集合) 简单说： 哈希表实现Map通过哈希函数将键（key）映射到一个哈希值（通常是数组索引），在对应索引位置存储键值对（key-value pair）。如果发生哈希冲突（多个键映射到同一索引），通常通过链表或红黑树（Java 8+）解决。 哈希表实现 Set 的方式类似 Map，但只存储元素（相当于 Map 的键），没有值（v..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-08T03:01:22.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:modified_time","content":"2025-06-08T03:01:22.000Z"}]]},"git":{"createdTime":1749351682000,"updatedTime":1749351682000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":7.66,"words":2298},"filePathRelative":"posts/计算机基础/数据结构算法/Map(映射)和Set(集合).md","excerpt":"\\n<p>简单说：</p>\\n<p>哈希表实现Map通过哈希函数将键（key）映射到一个哈希值（通常是数组索引），在对应索引位置存储键值对（key-value pair）。如果发生哈希冲突（多个键映射到同一索引），通常通过链表或红黑树（Java 8+）解决。</p>\\n<p>哈希表实现 Set 的方式类似 Map，但只存储元素（相当于 Map 的键），没有值（value）</p>\\n<hr>\\n<p>在数据结构中，Map 和 Set 是两种常见的高级数据结构，通常用于存储和操作数据。以下是它们的主要区别，用简洁的方式说明：</p>\\n<p>1. 定义</p>\\n<ul>\\n<li>\\n<p>Map：键值对（key-value pair）的集合，键是唯一的，值可以重复。用于存储键到值的映射关系。</p>\\n<ul>\\n<li>示例：{\\"name\\": \\"Alice\\", \\"age\\": 25}，键是 \\"name\\" 和 \\"age\\"，值是 \\"Alice\\" 和 25。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Set：唯一元素的集合，无键值对概念，元素不可重复。</p>\\n<ul>\\n<li>示例：{1, 2, 3}，每个元素只出现一次。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}}}]);