"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[1902],{628:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,r]of e)a[t]=r;return a}},8275:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>i,data:()=>o});var r=a(8178);const n={},i=(0,a(628).A)(n,[["render",function(t,e){const a=(0,r.g2)("RouteLink");return(0,r.uX)(),(0,r.CE)("div",null,[e[6]||(e[6]=(0,r.Lk)("h1",{id:"几种搜索算法对比",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#几种搜索算法对比"},[(0,r.Lk)("span",null,"几种搜索算法对比")])],-1)),(0,r.Lk)("ul",null,[(0,r.Lk)("li",null,[e[1]||(e[1]=(0,r.eW)("BFS, DFS：漫无目的的搜索。所谓漫无目的，就是没有")),(0,r.bF)(a,{to:"/posts/Game%20AI/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%9A%84%E5%90%AB%E4%B9%89.html"},{default:(0,r.k6)(()=>e[0]||(e[0]=[(0,r.eW)("启发式")])),_:1,__:[0]}),e[2]||(e[2]=(0,r.eW)("。但DFS是一根筋的搜索，如果搜到Goal就停止，可能会错过最短路径"))]),e[3]||(e[3]=(0,r.Lk)("li",null,"greedyBestFirst: 朝着启发式的方向，一根筋的搜索，和DFS一样是非最短路径算法",-1)),e[4]||(e[4]=(0,r.Lk)("li",null,"dijkstraSearch：考虑路径权重的搜索，搜索过程中更新记录每个节点的最短distance，高于当前路径权重的边就不入队了。有点像动态规划的味道，拆成子问题，算出每个子问题的最优解（最短路径）。Goal只是一个特例，顺带算出。它是“全局最短路径表”的构建，不是仅仅为了某个目标点。",-1)),e[5]||(e[5]=(0,r.Lk)("li",null,"AStar：dijkstraSearch加入启发式的“优化”版。所谓优化是如果只算Goal的最短路径，dijkstraSearch依然像BFS一样漫无目的搜索，如果启发方式是严格正确的，那确实没必要再去搜索f = 当前节点最短distance+当前节点到目标的启发式距离，比f值更大的节点。以这个方式，来优化只算Goal的distance这种特例情况的搜索次数。",-1))])])}]]),o=JSON.parse('{"path":"/posts/Game%20AI/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%87%A0%E7%A7%8D%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94.html","title":"几种搜索算法对比","lang":"zh-CN","frontmatter":{"date":"2025-08-22T00:00:00.000Z","tag":["Draft"],"draft":true,"description":"几种搜索算法对比 BFS, DFS：漫无目的的搜索。所谓漫无目的，就是没有。但DFS是一根筋的搜索，如果搜到Goal就停止，可能会错过最短路径 greedyBestFirst: 朝着启发式的方向，一根筋的搜索，和DFS一样是非最短路径算法 dijkstraSearch：考虑路径权重的搜索，搜索过程中更新记录每个节点的最短distance，高于当前路径权...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"几种搜索算法对比\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-16T13:48:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Game%20AI/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%87%A0%E7%A7%8D%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"几种搜索算法对比"}],["meta",{"property":"og:description","content":"几种搜索算法对比 BFS, DFS：漫无目的的搜索。所谓漫无目的，就是没有。但DFS是一根筋的搜索，如果搜到Goal就停止，可能会错过最短路径 greedyBestFirst: 朝着启发式的方向，一根筋的搜索，和DFS一样是非最短路径算法 dijkstraSearch：考虑路径权重的搜索，搜索过程中更新记录每个节点的最短distance，高于当前路径权..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-16T13:48:19.000Z"}],["meta",{"property":"article:tag","content":"Draft"}],["meta",{"property":"article:published_time","content":"2025-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-16T13:48:19.000Z"}]]},"git":{"createdTime":1758030499000,"updatedTime":1758030499000,"contributors":[{"name":"runner2011","username":"runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/runner2011"}]},"readingTime":{"minutes":1.06,"words":318},"filePathRelative":"posts/Game AI/搜索算法/几种搜索算法对比.md","excerpt":"\\n<ul>\\n<li>BFS, DFS：漫无目的的搜索。所谓漫无目的，就是没有<a href=\\"/posts/Game%20AI/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%9A%84%E5%90%AB%E4%B9%89.html\\" target=\\"_blank\\">启发式</a>。但DFS是一根筋的搜索，如果搜到Goal就停止，可能会错过最短路径</li>\\n<li>greedyBestFirst: 朝着启发式的方向，一根筋的搜索，和DFS一样是非最短路径算法</li>\\n<li>dijkstraSearch：考虑路径权重的搜索，搜索过程中更新记录每个节点的最短distance，高于当前路径权重的边就不入队了。有点像动态规划的味道，拆成子问题，算出每个子问题的最优解（最短路径）。Goal只是一个特例，顺带算出。它是“全局最短路径表”的构建，不是仅仅为了某个目标点。</li>\\n<li>AStar：dijkstraSearch加入启发式的“优化”版。所谓优化是如果只算Goal的最短路径，dijkstraSearch依然像BFS一样漫无目的搜索，如果启发方式是严格正确的，那确实没必要再去搜索f = 当前节点最短distance+当前节点到目标的启发式距离，比f值更大的节点。以这个方式，来优化只算Goal的distance这种特例情况的搜索次数。</li>\\n</ul>","autoDesc":true}')}}]);