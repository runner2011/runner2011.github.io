"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[6538],{628:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,a]of t)n[e]=a;return n}},6021:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>l,data:()=>s});var a=n(8178);const i={},l=(0,n(628).A)(i,[["render",function(e,t){const n=(0,a.g2)("VPIcon");return(0,a.uX)(),(0,a.CE)("div",null,[t[4]||(t[4]=(0,a.Fv)('<h1 id="unrealengine中结构体作为参数传引用还是拷贝" tabindex="-1"><a class="header-anchor" href="#unrealengine中结构体作为参数传引用还是拷贝"><span>UnrealEngine中结构体作为参数传引用还是拷贝</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>:class SMyCustomWidget : public SCompoundWidget</span></span>\n<span class="line"><span>{ </span></span>\n<span class="line"><span>    public: </span></span>\n<span class="line"><span>    void Construct(const FArguments&amp; InArgs) </span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        // ...</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q:这段代码中const FArguments&amp; InArgs为什么要用引用，为什么不用拷贝？</p><hr><p>A:(Grok)在代码中，const FArguments&amp; InArgs 使用引用而不是拷贝，主要有以下几个原因：</p><ol><li>性能优化：<br> FArguments 是一个结构体，通常包含多个成员变量（如属性、回调等）。如果使用拷贝，会创建 FArguments 的完整副本，这会增加内存分配和复制的开销。使用 const 引用避免了拷贝，只传递原始对象的引用，性能更高，尤其是在 FArguments 可能包含大量数据时。</li><li>避免不必要的修改：<br> 使用 const 引用确保 InArgs 在 Construct 函数中不会被意外修改。FArguments 是 Slate 框架中用来传递 widget 初始化参数的结构体，设计上只需要读取数据，而不需要修改。const 引用清楚地表达了这种只读意图，同时保持高效。</li><li>Slate 框架的设计约定：<br> Slate 框架中的 Construct 函数通常以 const FArguments&amp; 作为参数，这是 Unreal Engine 的标准做法。这种设计统一了代码风格，并确保开发者在构造 widget 时不会意外修改传入的参数。</li><li>避免潜在的拷贝构造问题：<br> 如果 FArguments 包含不可拷贝的成员（例如某些智能指针或非拷贝构造的对象），直接拷贝可能导致编译错误或运行时问题。引用避免了这些问题，因为它不依赖于对象的拷贝构造函数。</li></ol><p>总结：使用 const FArguments&amp; 是为了高效传递参数、防止意外修改、遵循 Slate 框架的设计规范，同时避免潜在的拷贝构造问题。这是 C++ 中处理复杂结构体参数的常见做法。</p><p>Q:那Unreal engine中，FVector用引用还是拷贝？</p><hr><p>在 Unreal Engine 中，FVector 是否使用引用（FVector&amp; 或 const FVector&amp;）还是拷贝（FVector）取决于具体的使用场景和设计需求。以下是详细分析：</p><p>1. FVector 的特性</p><ul><li>FVector 是一个轻量级结构体，包含三个 float 成员（X、Y、Z），占用 12 字节（在 32 位或 64 位系统中）。</li><li>它是一个值类型，设计上允许频繁拷贝，且拷贝成本较低（相比复杂结构体如 FArguments）。</li><li>FVector 的拷贝构造函数和赋值操作是高效的，没有额外的动态内存分配或复杂逻辑。</li></ul><p>2. 使用引用的场景</p><p>FVector 使用引用（FVector&amp; 或 const FVector&amp;）的原因和场景包括：</p><ul><li><p>性能优化（微优化）：虽然 FVector 拷贝成本低，但在高性能场景（如大规模循环、实时物理计算或渲染），传递引用可以进一步减少内存复制开销。例如，在函数参数中：</p><p>cpp</p><pre><code>void UpdatePosition(const FVector&amp; NewPosition);\n</code></pre><p>使用 const FVector&amp; 避免拷贝，适合只读场景。</p></li><li><p>修改原始对象：如果函数需要修改传入的 FVector，必须使用非 const 引用：</p><p>cpp</p><pre><code>void ModifyVector(FVector&amp; Vector);\n</code></pre></li><li><p>Slate 或其他复杂系统中的一致性：在 Unreal 的 Slate 框架或其他需要统一接口的地方，可能会使用 const FVector&amp; 以保持与框架中其他参数传递方式一致（如 FArguments）。</p></li><li><p>避免不必要拷贝的习惯：在 C++ 中，传递复杂对象的 const 引用是惯例，即使 FVector 拷贝开销小，开发者可能为了代码一致性而选择引用。</p></li></ul><p>3. 使用拷贝的场景</p><p>FVector 直接拷贝（FVector）的原因和场景包括：</p><ul><li><p>简单性和安全性：拷贝创建独立副本，避免意外修改原始对象。尤其在多线程代码或需要确保数据隔离时，拷贝更安全：</p><p>cpp</p><pre><code>FVector GetOffset() const { return FVector(1.0f, 2.0f, 3.0f); }\n</code></pre></li><li><p>低拷贝成本：FVector 仅 12 字节，拷贝开销远小于复杂结构体（如 FArguments 或 TArray）。在大多数情况下，拷贝的性能影响可以忽略不计。</p></li><li><p>值语义：FVector 设计为值类型，拷贝符合其语义，直观且易于理解。例如：</p><p>cpp</p><pre><code>FVector NewPosition = OldPosition + FVector(10.0f, 0.0f, 0.0f);\n</code></pre><p>这种场景下，拷贝是自然且高效的。</p></li><li><p>返回值的常见做法：函数返回 FVector 时通常直接返回拷贝，因为 C++ 的返回优化（RVO/NRVO）会消除拷贝开销：</p><p>cpp</p><pre><code>FVector GetLocation() const { return Location; }\n</code></pre></li></ul><p>4. Unreal Engine 中的实际用法</p><ul><li><p>Unreal 源码中的模式：</p><ul><li><p>在 Unreal Engine 的源码中，FVector 既可能以拷贝传递，也可能以引用传递，具体取决于函数的语义。例如：</p><ul><li>只读参数：常用 const FVector&amp;（如 SetActorLocation(const FVector&amp; NewLocation)）。</li><li>修改参数：使用 FVector&amp;（如 FVector::Normalize()）。</li><li>返回值或简单传递：直接用 FVector（如 FVector::CrossProduct(const FVector A, const FVector B)）。</li></ul></li><li><p>在高性能代码（如物理引擎或渲染管线），Unreal 倾向于用 const FVector&amp; 来避免拷贝。</p></li><li><p>在 Blueprint 暴露的函数中，FVector 通常以拷贝传递，因为蓝图调用频率较低，且拷贝更符合蓝图的简单语义。</p></li></ul></li><li><p>性能权衡：</p><ul><li>在现代 CPU 上，拷贝 FVector 的开销通常很小（几个 CPU 周期）。但在性能敏感场景（如每帧调用数千次），引用可能更优。</li><li>如果函数调用频率低（如初始化或事件处理），拷贝和引用的性能差异几乎可以忽略。</li></ul></li></ul><p>5. 选择引用还是拷贝的建议</p><ul><li><p>用引用（const FVector&amp; 或 FVector&amp;）：</p><ul><li>函数需要修改传入的 FVector。</li><li>在性能敏感的代码中（例如，循环中处理大量 FVector）。</li><li>需要与 Unreal 框架的其他接口保持一致（如 Slate 或某些 API）。</li><li>传递给只读函数，且希望明确表达不修改意图。</li></ul></li><li><p>用拷贝（FVector）：</p><ul><li>函数逻辑需要独立副本以避免修改原始数据。</li><li>代码简单性优先，且性能不是瓶颈（例如，蓝图相关或低频调用）。</li><li>返回值或临时计算场景（得益于 RVO 优化）。</li><li>遵循值语义，直观且符合 FVector 的设计。</li></ul></li></ul><p>6. 与 FArguments 的对比</p><ul><li>与 FArguments 不同，FVector 的拷贝成本低，结构简单，没有复杂的成员（如指针或动态分配）。因此，FVector 使用拷贝的场景比 FArguments 更常见。</li><li>FArguments 通常包含大量数据或复杂对象，拷贝成本高，因此 Slate 框架中强制使用 const FArguments&amp;。</li></ul><p>7. 总结</p><p>在 Unreal Engine 中，FVector 既可以用引用也可以用拷贝：</p><ul><li>引用（const FVector&amp; 或 FVector&amp;）：适合性能敏感场景、需要修改对象或与框架接口保持一致。</li><li>拷贝（FVector）：适合简单场景、值语义明确、性能影响可忽略时。</li><li>推荐：在大多数情况下，拷贝 FVector 是可以接受的，因为其开销小且代码更直观。但在高性能代码或需要修改时，优先考虑引用。参考 Unreal 源码和上下文选择最合适的传递方式。</li></ul><p>如果你有具体代码或场景需要进一步分析，可以提供更多细节，我可以帮你判断！</p>',28)),(0,a.Lk)("p",null,[t[0]||(t[0]=(0,a.eW)("Q:ENGINE_API bool SetActorLocation(const FVector& NewLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType")),(0,a.bF)(n,{icon:"None);\\\nENGINE\\_API bool SetActorRotation(FRotator NewRotation, ETeleportType Teleport",size:" ETeleportType"}),t[1]||(t[1]=(0,a.eW)("None);")),t[2]||(t[2]=(0,a.Lk)("br",null,null,-1)),t[3]||(t[3]=(0,a.eW)(" 不统一。"))]),t[5]||(t[5]=(0,a.Fv)('<hr><p>A:(ChatGPT)好！你这个发现非常棒，说明你对 Unreal Engine 的 API 设计风格开始捕捉到细节差异了。我们来<strong>认真拆透</strong>这个现象：</p><hr><h2 id="📌-为什么-setactorrotation-frotator-newrotation-是按值传递" tabindex="-1"><a class="header-anchor" href="#📌-为什么-setactorrotation-frotator-newrotation-是按值传递"><span>📌 为什么 <code>SetActorRotation(FRotator NewRotation)</code> 是按值传递？</span></a></h2><h3 id="🎯-关键点" tabindex="-1"><a class="header-anchor" href="#🎯-关键点"><span>🎯 关键点：</span></a></h3><p><strong>FRotator 本质上是个小对象（3 个 float，12 字节）</strong>，和 FVector 大小完全一样，但它却按值传递。那为什么不统一成引用？</p><blockquote><p>答案是：<strong>这里不涉及复杂 ABI 风险，而且该函数的调用频率较低，参数固定，不涉及返回值结构，也没有 FHitResult 这种指针参数的 ABI 连锁依赖</strong>。</p></blockquote><hr><h3 id="📖-unreal-官方-api-设计的潜规则" tabindex="-1"><a class="header-anchor" href="#📖-unreal-官方-api-设计的潜规则"><span>📖 Unreal 官方 API 设计的潜规则：</span></a></h3><p>在 Unreal 引擎里，<strong>如果一个跨模块函数：</strong></p><ul><li>参数是简单小对象（POD：Plain Old Data）</li><li><strong>没有 FHitResult 指针或 TArray/FString 这些堆内存结构</strong></li><li>不涉及返回引用或引用链传递</li><li>没有 delegate/bindable callback</li></ul><p><strong>就可以按值传递。</strong></p><hr><h2 id="📊-两者对比看看" tabindex="-1"><a class="header-anchor" href="#📊-两者对比看看"><span>📊 两者对比看看：</span></a></h2><h3 id="setactorlocation" tabindex="-1"><a class="header-anchor" href="#setactorlocation"><span><code>SetActorLocation</code></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>bool SetActorLocation(const FVector&amp; NewLocation, bool bSweep = false, FHitResult* OutSweepHitResult = nullptr, ETeleportType Teleport = ETeleportType::None);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✔️ 涉及：</p><ul><li><code>FVector</code> 位置</li><li><code>FHitResult*</code> 指针（堆内存结构）</li><li>多个参数，且与物理/碰撞子系统交互复杂，调用路径长 → ABI 风险大<br> → 必须用 <code>const FVector&amp;</code></li></ul><hr><h3 id="setactorrotation" tabindex="-1"><a class="header-anchor" href="#setactorrotation"><span><code>SetActorRotation</code></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>bool SetActorRotation(FRotator NewRotation, ETeleportType Teleport = ETeleportType::None);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✔️ 涉及：</p><ul><li><code>FRotator</code> 12B 小对象，拷贝成本极低</li><li>没有 FHitResult，物理交互单一，内部调用链简单</li><li>Unreal 编译器强制 inline 多（<code>FORCEINLINE</code> 很多），热重载/ABI风险相对较小</li><li><strong>主要是 Blueprint 或 C++ 用户简单调用</strong></li></ul><p>→ 所以直接按值传递，性能反而更好。</p><hr><h2 id="📌-实际-unreal-源码里很多类似情况" tabindex="-1"><a class="header-anchor" href="#📌-实际-unreal-源码里很多类似情况"><span>📌 实际 Unreal 源码里很多类似情况：</span></a></h2><p>比如 <code>FQuat</code>、<code>FLinearColor</code>、<code>FVector4</code>、<code>FName</code> 也大多按值传递，<strong>只要不涉及 FHitResult/TArray/FString 指针链/Delegate 就没 ABI 风险</strong>。</p><hr><h2 id="✅-最终结论" tabindex="-1"><a class="header-anchor" href="#✅-最终结论"><span>✅ 最终结论：</span></a></h2><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">传参方式</th><th style="text-align:left;">原因</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SetActorLocation</code></td><td style="text-align:left;"><code>const FVector&amp;</code></td><td style="text-align:left;">有 FHitResult 指针链，物理子系统交互复杂，ABI 风险高</td></tr><tr><td style="text-align:left;"><code>SetActorRotation</code></td><td style="text-align:left;"><code>FRotator</code> 值传</td><td style="text-align:left;">小对象，无指针链，调用链简单，按值快且安全</td></tr></tbody></table><hr><h3 id="📌-其实-unreal-api-不是-所有小对象都引用-或-所有小对象都值传-而是结合-abi-风险、调用链复杂度、热重载稳定性综合判断的。" tabindex="-1"><a class="header-anchor" href="#📌-其实-unreal-api-不是-所有小对象都引用-或-所有小对象都值传-而是结合-abi-风险、调用链复杂度、热重载稳定性综合判断的。"><span>📌 其实 Unreal API 不是“所有小对象都引用” 或 “所有小对象都值传”，而是<strong>结合 ABI 风险、调用链复杂度、热重载稳定性</strong>综合判断的。</span></a></h3><hr><p>如果你想，我可以帮你总结一份【Unreal Engine API 传参规范实践手册（精简版）】，把这些易混地方一次理清。要不要？🔥</p>',34))])}]]),s=JSON.parse('{"path":"/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/UnrealEngine%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E5%BC%95%E7%94%A8%E8%BF%98%E6%98%AF%E6%8B%B7%E8%B4%9D.html","title":"UnrealEngine中结构体作为参数传引用还是拷贝","lang":"zh-CN","frontmatter":{"date":"2025-06-27T00:00:00.000Z","tag":["AI_GEN"],"description":"UnrealEngine中结构体作为参数传引用还是拷贝 Q:这段代码中const FArguments& InArgs为什么要用引用，为什么不用拷贝？ A:(Grok)在代码中，const FArguments& InArgs 使用引用而不是拷贝，主要有以下几个原因： 性能优化： FArguments 是一个结构体，通常包含多个成员变量（如属性、回调等...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UnrealEngine中结构体作为参数传引用还是拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-27T15:28:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/UnrealEngine%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E5%BC%95%E7%94%A8%E8%BF%98%E6%98%AF%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"UnrealEngine中结构体作为参数传引用还是拷贝"}],["meta",{"property":"og:description","content":"UnrealEngine中结构体作为参数传引用还是拷贝 Q:这段代码中const FArguments& InArgs为什么要用引用，为什么不用拷贝？ A:(Grok)在代码中，const FArguments& InArgs 使用引用而不是拷贝，主要有以下几个原因： 性能优化： FArguments 是一个结构体，通常包含多个成员变量（如属性、回调等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-27T15:28:02.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:published_time","content":"2025-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-27T15:28:02.000Z"}]]},"git":{"createdTime":1751038082000,"updatedTime":1751038082000,"contributors":[{"name":"Runner2011","username":"Runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/Runner2011"}]},"readingTime":{"minutes":7.88,"words":2363},"filePathRelative":"posts/Unreal Engine/学习/MISC/UnrealEngine中结构体作为参数传引用还是拷贝.md","excerpt":"\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>:class SMyCustomWidget : public SCompoundWidget</span></span>\\n<span class=\\"line\\"><span>{ </span></span>\\n<span class=\\"line\\"><span>    public: </span></span>\\n<span class=\\"line\\"><span>    void Construct(const FArguments&amp; InArgs) </span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        // ...</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);