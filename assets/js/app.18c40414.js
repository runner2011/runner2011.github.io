"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[3524],{1709:(e,t,n)=>{n.d(t,{l:()=>l});const l=JSON.parse('{"category":{"/":{"path":"/category/","map":{}}},"tag":{"/":{"path":"/tag/","map":{"AI_GEN":{"path":"/tag/ai-gen/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]},"Math":{"path":"/tag/math/","indexes":[0,1,4]},"stars":{"path":"/tag/stars/","indexes":[34]},"AI":{"path":"/tag/ai/","indexes":[35,36,37]},"English":{"path":"/tag/english/","indexes":[38]}}}}}')},2878:(e,t,n)=>{n.d(t,{P:()=>l});const l={}},3781:(e,t,n)=>{n.d(t,{U:()=>l});const l=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[35,0,1,2,3,4,5,39,6,36,37,7,8,9,10,11,12,13,14,15,38,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}},"star":{"/":{"path":"/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[35,0,1,2,3,4,5,39,6,36,37,7,8,9,10,11,12,13,14,15,38,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}}}')},4776:(e,t,n)=>{n.d(t,{M:()=>l});const l=JSON.parse('["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA.html","/posts/Math/%E6%AD%A3%E5%88%99%E5%8C%96_%E5%B2%AD%E5%9B%9E%E5%BD%92_lasso%E5%9B%9E%E5%BD%92.html","/posts/AI/MISC/AI%E5%AF%B9%E8%AE%A1%E7%AE%97%E5%B7%A5%E7%A8%8B%E9%A2%86%E5%9F%9F%E9%87%8D%E5%A1%91%E7%9A%84%E8%AE%A8%E8%AE%BA.html","/posts/AI/MISC/%E6%96%B0%E7%9A%84Transformer%E6%A8%A1%E5%9E%8B%E9%80%82%E9%85%8D%E5%88%B0%E9%AB%98%E9%80%9A%E8%8A%AF%E7%89%87%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88.html","/posts/Math/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html","/posts/AI/MISC/AI%E6%8A%80%E6%9C%AF%E4%BC%9A%E6%98%AF%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD%E5%90%97.html","/posts/AI/MISC/John%20Carmack%20(Keen%20Technologies)_%20Research%20Directions%20at%20Upper%20Bound%202025.html","/posts/Other/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%E5%9C%A8%E5%8D%B3%E5%B0%86%E5%88%B0%E6%9D%A5%E7%9A%84AI%E6%97%B6%E4%BB%A3%EF%BC%8C%E6%80%8E%E4%B9%88%E5%81%9A%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B8%8D%E8%A2%ABAI%E6%B7%98%E6%B1%B0%E6%9B%BF%E4%BB%A3.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/UnrealEngine%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E5%BC%95%E7%94%A8%E8%BF%98%E6%98%AF%E6%8B%B7%E8%B4%9D.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/Slate/Slate%E5%8E%9F%E7%90%86.html","/posts/%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%BF%90%E5%8A%A8%E5%AD%A6VS%E5%8A%A8%E5%8A%9B%E5%AD%A6.html","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/Map(%E6%98%A0%E5%B0%84)%E5%92%8CSet(%E9%9B%86%E5%90%88).html","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%EF%BC%8C%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.html","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E5%A0%86.html","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(ADT).html","/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html","/posts/Game%20AI/placeholder.html","/posts/Gameplay/placeholder.html","/posts/Animation/%E6%B8%B8%E6%88%8F%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/placeholder.html","/posts/Graphics/LearnOpenGL/placeholder.html","/posts/Other/Math/placeholder.html","/posts/Other/%E6%B8%B8%E6%88%8F/placeholder.html","/posts/Programming/C_/placeholder.html","/posts/Programming/C__/placeholder.html","/posts/Unreal%20Engine/%E4%BC%98%E5%8C%96/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision_Overlap/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MassEntity/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Memory/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Networking/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/TextureStreaming/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Gameplay/GameplayAbilitySystem/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/Level%20Streaming/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Composition/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Partition/placeholder.html","/posts/runner2011/blog1.html","/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B%E5%85%B3%E7%B3%BB.html","/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/AI%E6%A6%82%E8%AE%BA.html","/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/AI%E6%A8%A1%E5%9E%8B.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/Compiling%20UnrealEngine%20Project%20by%20Command.html","/Resources/UpperBound25.html"]')},4923:(e,t,n)=>{},6653:(e,t,n)=>{n.d(t,{K:()=>l});const l=JSON.parse('{"encrypt":{},"author":{"name":"Runner2011","url":"https://runner2011.github.io"},"logo":"/.vuepress/public/logo.svg","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"Be quick."},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/"],"sidebar":{"/":["",{"text":"文章","icon":"book","prefix":"posts/","children":"structure"}]}}}}')},7881:(e,t,n)=>{n.d(t,{B:()=>z});var l={};n.r(l),n.d(l,{default:()=>c});var i={};n.r(i);var r={};n.r(r);var a={};n.r(a);var o={};n.r(o);var s={};n.r(s),n.d(s,{default:()=>I});var E={};n.r(E),n.d(E,{default:()=>D});var p={};n.r(p);var d={};n.r(d);var A={};n.r(A),n.d(A,{default:()=>P});var h={};n.r(h),n.d(h,{default:()=>_});var m={};n.r(m),n.d(m,{default:()=>H});var g=n(5041);const c={enhance:({app:e})=>{e.component("GitContributors",g.B)}};var B=n(6712),u=n(4036),b=n(8577);const I={enhance:({app:e})=>{e.component("CodeTabs",u.S),e.component("Tabs",b.t)}};var x=n(3878),C=n(7685);const D={enhance:({app:e})=>{e.component("CodeDemo",x.A),e.component("MdDemo",C.A)}};var y=n(4846),f=n(8989),F=n(8739),T=n(3580),S=n(2673),v=n(8178),G=n(9271);const P={enhance:({app:e})=>{(0,T.L)("VPIcon")||e.component("VPIcon",e=>(0,v.h)(G.G,{type:"iconify",prefix:"fa6-solid:",...e}))},setup:()=>{(0,S.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var U=n(2431),N=n(7885),M=n(7317),k=n(3988);n(372);const _={enhance:({app:e})=>{(0,N.L)("Badge")||e.component("Badge",M.A),(0,N.L)("VPCard")||e.component("VPCard",k.A)},setup:()=>{},rootComponents:[]};var w=n(4157),O=n(7482),L=n(8418),W=n(1732),R=n(6179),Q=n(6697),K=n(3799),V=n(1522),J=n(2304),j=n(3606);n(1783),n(2716),n(5259),n(7654),(0,V.M_)(e=>{const t=e.title,n=e.index??!0,l=e.icon;return n?{title:t,content:l?()=>[(0,v.h)((0,v.g2)("VPIcon"),{icon:l,sizing:"both"}),t]:null,order:e.order,index:e.index}:null});const H={enhance:({app:e,router:t})=>{const{scrollBehavior:n}=t.options;t.options.scrollBehavior=async(...e)=>(await R.s.wait(),n(...e)),(0,Q.i)(e),e.component("BloggerInfo",J.l),e.component("SocialMedias",J.k)},setup:()=>{(0,Q.s)(),(0,Q.a)(),(0,j.su)()},layouts:{Layout:K.L,NotFound:K.N,Blog:J.B}},z=[l,i,r,a,B,o,s,E,p,d,y,f,F,A,U,h,w,O,L,W,m].map(e=>e.default).filter(Boolean)},8123:(e,t,n)=>{n.d(t,{v:()=>l});const l={"/posts/":[{text:"AI",prefix:"AI/",collapsible:!0,children:[{text:"AI概念入门",prefix:"AI概念入门/",collapsible:!0,children:["AI概论","AI模型","支持向量机","神经网络和机器学习经典模型关系"]},{text:"MISC",prefix:"MISC/",collapsible:!0,children:["AI对计算工程领域重塑的讨论","AI技术会是第四次工业革命吗","John Carmack (Keen Technologies)_ Research Directions at Upper Bound 2025","新的Transformer模型适配到高通芯片需要做什么"]}]},{text:"Animation",prefix:"Animation/",collapsible:!0,children:[{text:"游戏动画技术学习",prefix:"游戏动画技术学习/",collapsible:!0,children:["placeholder"]}]},{text:"Game AI",prefix:"Game AI/",collapsible:!0,children:["placeholder"]},{text:"Gameplay",prefix:"Gameplay/",collapsible:!0,children:["placeholder"]},{text:"Graphics",prefix:"Graphics/",collapsible:!0,children:[{text:"Learn Open GL",prefix:"LearnOpenGL/",collapsible:!0,children:["placeholder"]}]},{text:"Math",prefix:"Math/",collapsible:!0,children:["/posts/Math/%E6%AD%A3%E5%88%99%E5%8C%96_%E5%B2%AD%E5%9B%9E%E5%BD%92_lasso%E5%9B%9E%E5%BD%92.html","线性回归"]},{text:"Other",prefix:"Other/",collapsible:!0,children:[{text:"Math",prefix:"Math/",collapsible:!0,children:["placeholder"]},{text:"工作生活",prefix:"工作生活/",collapsible:!0,children:["在即将到来的AI时代，怎么做让自己不被AI淘汰替代"]},{text:"游戏",prefix:"游戏/",collapsible:!0,children:["placeholder"]}]},{text:"Programming",prefix:"Programming/",collapsible:!0,children:[{text:"C#",prefix:"C_/",collapsible:!0,children:["/posts/Programming/C_/placeholder.html"]},{text:"C++",prefix:"C__/",collapsible:!0,children:["/posts/Programming/C__/placeholder.html"]}]},{text:"Runner2011",prefix:"runner2011/",collapsible:!0,children:["blog1"]},{text:"Unreal Engine",prefix:"Unreal Engine/",collapsible:!0,children:[{text:"优化",prefix:"优化/",collapsible:!0,children:["placeholder"]},{text:"学习",prefix:"学习/",collapsible:!0,children:[{text:"Collision& Overlap",prefix:"Collision_Overlap/",collapsible:!0,children:["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision_Overlap/placeholder.html"]},{text:"Gameplay",prefix:"Gameplay/",collapsible:!0,children:[{text:"Gameplay Ability System",prefix:"GameplayAbilitySystem/",collapsible:!0,children:["placeholder"]}]},{text:"Mass Entity",prefix:"MassEntity/",collapsible:!0,children:["placeholder"]},{text:"Memory",prefix:"Memory/",collapsible:!0,children:["placeholder"]},{text:"MISC",prefix:"MISC/",collapsible:!0,children:["Compiling UnrealEngine Project by Command","UnrealEngine中结构体作为参数传引用还是拷贝"]},{text:"Networking",prefix:"Networking/",collapsible:!0,children:["placeholder"]},{text:"Texture Streaming",prefix:"TextureStreaming/",collapsible:!0,children:["placeholder"]},{text:"UI",prefix:"UI/",collapsible:!0,children:[{text:"Slate",prefix:"Slate/",collapsible:!0,children:["Slate原理"]}]},{text:"World Building",prefix:"WorldBuilding/",collapsible:!0,children:[{text:"Level Streaming",prefix:"Level Streaming/",collapsible:!0,children:["placeholder"]},{text:"World Composition",prefix:"World Composition/",collapsible:!0,children:["placeholder"]},{text:"World Partition",prefix:"World Partition/",collapsible:!0,children:["placeholder"]}]}]}]},{text:"科学基础",prefix:"科学基础/",collapsible:!0,children:["运动学VS动力学"]},{text:"计算机基础",prefix:"计算机基础/",collapsible:!0,children:[{text:"数据结构算法",prefix:"数据结构算法/",collapsible:!0,children:["Map(映射)和Set(集合)","哈夫曼树，哈夫曼编码","堆","抽象数据结构 (ADT)","贪心算法，动态规划"]}]}]}},8164:(e,t,n)=>{n.d(t,{J:()=>i,c:()=>l});const l=JSON.parse('{"/posts/Math/%E6%AD%A3%E5%88%99%E5%8C%96,%E5%B2%AD%E5%9B%9E%E5%BD%92,lasso%E5%9B%9E%E5%BD%92.html":"/posts/Math/%E6%AD%A3%E5%88%99%E5%8C%96_%E5%B2%AD%E5%9B%9E%E5%BD%92_lasso%E5%9B%9E%E5%BD%92.html","/posts/Programming/C#/placeholder.html":"/posts/Programming/C_/placeholder.html","/posts/Programming/C++/placeholder.html":"/posts/Programming/C__/placeholder.html","/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision&Overlap/placeholder.html":"/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision_Overlap/placeholder.html"}'),i=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,1922)),meta:{title:"博客主页"}}],["/Resources/UpperBound25.html",{loader:()=>n.e(7719).then(n.bind(n,5100)),meta:{date:1751722155e3,excerpt:"\n<h1>Quick background</h1>\n<h2>Id Software</h2>\n<p>&lt;picture of early games&gt;</p>\n<p>Founder of Id Software in the 90’s, wrote the Commander Keen, Wolfenstein 3D, Doom, and Quake series. I take some pride in knowing that Quake drove GPU development and adoption, leading indirectly to the modern AI world. DeepMind’s DMLab environments are also built on sanitized versions of Quake Arena.</p>",readingTime:{minutes:16.23,words:4869},title:"UpperBound 25 talk notes",type:"article"}}],["/posts/Game%20AI/placeholder.html",{loader:()=>n.e(7656).then(n.bind(n,4970)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Gameplay/placeholder.html",{loader:()=>n.e(9154).then(n.bind(n,3541)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Math/%E6%AD%A3%E5%88%99%E5%8C%96_%E5%B2%AD%E5%9B%9E%E5%BD%92_lasso%E5%9B%9E%E5%BD%92.html",{loader:()=>n.e(2618).then(n.bind(n,412)),meta:{date:17519328e5,tag:["Math","AI_GEN"],excerpt:"\n<p>A:把我当作退休的老太太，给我解释正则化，岭回归，lasso回归。</p>\n<p>好！我来用退休老太太能听懂的方式，慢慢给你讲讲哈。我们就当在小区凉亭里唠嗑，慢慢来：</p>\n<hr>\n<h2>🌸 一、先说说<strong>正则化</strong>是个啥</h2>\n<p>你做菜放盐吧，太多太少都不好。模型也是这样，学得太少，预测不准；学得太多，连你家狗叫声的节奏都学进去，结果到新数据上就翻车，这叫<strong>过拟合</strong>。</p>\n<p><strong>正则化</strong>就是：<br>\n👉 在模型学数据的时候，旁边盯着，别让你学得太复杂了。<br>\n就像做菜有人提醒：“哎哎，盐别放太多，别太咸了哈！”</p>",readingTime:{minutes:2.36,words:709},title:"正则化,岭回归,lasso回归概念",type:"article"}}],["/posts/Math/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html",{loader:()=>n.e(9347).then(n.bind(n,6186)),meta:{date:175176e7,tag:["Math","AI_GEN"],excerpt:"\n<p>线性回归是一种基础监督学习算法，机器学习最基础的学习算法之一。</p>\n<p>一般最基础的使用<strong>损失函数</strong>和<strong>梯度下降算法</strong></p>\n<p>下面给老太太讲什么是线性回归。</p>\n<hr>\n<h2>📖 什么是线性回归？</h2>\n<p>想象你有个小孙子，每天吃多少饭（米饭的重量）和他的体重有关系。你记录了他这几天吃饭和体重的情况，想找出<strong>吃饭量和体重之间的关系</strong>。</p>\n<p>我们可以画个图，横着是「吃饭量」，竖着是「体重」，然后在图上把这些天的记录点点画出来。</p>\n<p><strong>线性回归</strong>就是：<br>\n👉 找一条<strong>直线</strong>，大致穿过这些点，表示吃饭量和体重的关系。</p>",readingTime:{minutes:2.89,words:866},title:"线性回归",type:"article"}}],["/posts/runner2011/blog1.html",{loader:()=>n.e(9370).then(n.bind(n,5557)),meta:{date:1749313517e3,tag:["stars"],excerpt:"\n<h2>Idle Animations</h2>\n<p>一共有三种方式</p>\n<ul>\n<li>\n<p>State machine，通过transition切换 （transition带有blend animation）</p>\n</li>\n<li>\n<p>BlendPoses (with int or with Enums)</p>\n<ul>\n<li>switch select by value 来选择动画</li>\n</ul>\n</li>\n<li>\n<p>use dynamic sequence with onUpdate data binding to update sequence to play. and use inerialization to blend with sequences.</p>\n</li>\n</ul>",readingTime:{minutes:.38,words:113},title:"博客test",type:"article"}}],["/posts/%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%BF%90%E5%8A%A8%E5%AD%A6VS%E5%8A%A8%E5%8A%9B%E5%AD%A6.html",{loader:()=>n.e(2454).then(n.bind(n,7432)),meta:{date:17499456e5,tag:["AI_GEN"],excerpt:"\n<p>Q:什么是Kinematics？为什么FK/IK control rig 是Kinematics(运动学）</p>\n<hr>\n<p>A (runner2011): 简单理解，不一定对。运动学研究物体的运动状态，位移，速度，加速度。动力学研究运动的因，即力，质量。control rig只是控制的运动状态，没有用physics的方式控制。</p>\n<hr>\n<p>非常棒的问题！其实这里有一点容易让人误会的地方：<strong>Kinematics（运动学）</strong> 和 <strong>Dynamics（动力学）</strong> 在物理学里是两个不同概念，但在3D动画和计算机图形学领域，大家习惯性把“正向动力学（Forward Kinematics）”和“反向动力学（Inverse Kinematics）”这两个术语沿用了过来。</p>",readingTime:{minutes:5.53,words:1660},title:"运动学VS动力学",type:"article"}}],["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/AI%E6%A6%82%E8%AE%BA.html",{loader:()=>n.e(1968).then(n.bind(n,8191)),meta:{date:17516736e5,tag:["AI"],excerpt:'\n<h2>生产力</h2>\n<p>我认为AI最大意义就是在<strong>当今扩大生产力</strong><br>\n计算机浪潮已经扩大了一次生产力了，不管下一次是否是由AI，但AI的确可以<strong>扩大生产力</strong><br>\n看下这张图：<br>\n<br>\n<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C" target="_blank" rel="noopener noreferrer">From Wikipedia, 由GAN deepfake生成的人脸</a><br>\n只要AI能进化，需要的能源比下降，生产力会不停的上升。</p>',readingTime:{minutes:.43,words:129},title:"AI概论",type:"article"}}],["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/AI%E6%A8%A1%E5%9E%8B.html",{loader:()=>n.e(488).then(n.bind(n,2723)),meta:{date:17516736e5,tag:["AI"],excerpt:"\n<p>我理解的AI经典模型是感知-&gt;认知-&gt;行为模型：<br>\n<br>\n<strong>感知</strong>：获取外界信息<br>\n<strong>认知</strong>：大脑，对外界信息进行处理，涉及到复杂概念，Resoning, Planning，Memory等<br>\n<strong>行为</strong>：根据认知做出的反应<br>\n游戏AI中也是用的这种经典模型。</p>\n<p><br>\n<em><strong>nvidia-ace</strong></em></p>\n<p><br>\n<em><strong>nvidia-ace</strong></em></p>\n",readingTime:{minutes:.43,words:128},title:"AI模型",type:"article"}}],["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA.html",{loader:()=>n.e(4502).then(n.bind(n,7246)),meta:{date:17520192e5,tag:["Math","AI_GEN"],excerpt:"\n<p>A:把我当作退休的老太太，给我解释支持向量机(SVM)</p>\n<p>好！我来把**支持向量机（SVM）**当作要跟退休老太太聊天一样，慢慢讲清楚，不用公式、不用吓人的术语，你就当听个故事：</p>\n<hr>\n<h2>📖 想象你在逛菜市场</h2>\n<p>你手里有两袋水果，一袋是苹果，一袋是橘子。你想把它们整齐地放在桌子上，<strong>用一根直尺把苹果和橘子分开</strong>，苹果放左边，橘子放右边。</p>\n<p>有时候，这很简单：</p>\n<ul>\n<li>苹果个头大，橘子小，你一看就能分开。</li>\n</ul>\n<p>有时候就难了：</p>\n<ul>\n<li>有的橘子个头像小苹果，颜色也差不多。你得想办法画一条尽量能把两边水果分开的线。</li>\n</ul>",readingTime:{minutes:2.21,words:664},title:"支持向量机",type:"article"}}],["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B%E5%85%B3%E7%B3%BB.html",{loader:()=>n.e(5171).then(n.bind(n,1792)),meta:{date:1752192e6,tag:["AI"],excerpt:"\n<p>Q:比如房价和距离模型问题，可以用线性回归模型。还有一些其他的逻辑回归，决策树等模型。这些机器学习模型和神经网络的关系是什么？</p>\n<p>Runner2011:<br>\n神经网络和经典模型的关系：</p>\n<ul>\n<li>每一层的神经元做的事都是一个经典模型(例如逻辑回归模型)做的事</li>\n<li>优化：经典模型直接用梯度算法。NN用的反向传播(也会用到梯度算法)。</li>\n</ul>\n<hr>\n<p>很好！我来给你捋清楚<strong>机器学习模型（如线性回归、逻辑回归、决策树等）和神经网络</strong>之间的关系和区别，咱们按体系讲清楚：</p>\n<hr>\n<h2>📌 机器学习模型体系</h2>",readingTime:{minutes:4.63,words:1389},title:"神经网络和机器学习经典模型关系",type:"article"}}],["/posts/AI/MISC/AI%E5%AF%B9%E8%AE%A1%E7%AE%97%E5%B7%A5%E7%A8%8B%E9%A2%86%E5%9F%9F%E9%87%8D%E5%A1%91%E7%9A%84%E8%AE%A8%E8%AE%BA.html",{loader:()=>n.e(2978).then(n.bind(n,6191)),meta:{date:1751800004e3,tag:["AI_GEN"],excerpt:"\n<p>Q:ai如果某种程度推动重塑，如果是某一方面的工程师或专家，掌握AI原理技能，有帮助吗</p>\n<p>是的，如果AI在某种程度上推动计算机科学子领域的重塑，作为某一领域的工程师或专家，掌握AI原理和技能将带来显著帮助。以下从多个角度分析掌握AI原理技能对工程师或专家的潜在价值，以及如何在“AI重塑”背景下提升竞争力：</p>\n<h3>1. <strong>为什么掌握AI原理技能有帮助？</strong></h3>\n<p>AI正在改变计算机科学子领域的工作方式、工具和范式，掌握AI原理技能对工程师或专家的帮助体现在以下方面：</p>\n<h4>a. <strong>提升工作效率</strong></h4>",readingTime:{minutes:8.21,words:2463},title:"AI对计算工程领域重塑的讨论",type:"article"}}],["/posts/AI/MISC/AI%E6%8A%80%E6%9C%AF%E4%BC%9A%E6%98%AF%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD%E5%90%97.html",{loader:()=>n.e(4762).then(n.bind(n,8422)),meta:{date:1751727566e3,tag:["AI_GEN"],excerpt:"\n<p>Runner2011:第四次工业革命概念已经提出，我觉得现在具体核心还并为真正清晰，需要让时间历史来总结</p>\n<p><strong>“第三次工业革命”<strong>这个概念指的是20世纪中后期以</strong>电子计算机、核能、自动化和信息技术</strong>为核心驱动力的产业变革（大约1950s-1970s开始）。而现在这波以**AI为代表的新一代通用技术（GPT、Sora、Auto-GPT、AI Agent、AI原生应用、AIGC）**驱动的浪潮，学界和经济学界更倾向称之为：</p>\n<ul>\n<li><strong>第四次工业革命（Industry 4.0）</strong></li>\n<li>或者称为<strong>智能化革命 / 数字智能革命</strong></li>\n</ul>",readingTime:{minutes:2.93,words:878},title:"AI技术会是第四次工业革命吗",type:"article"}}],["/posts/AI/MISC/John%20Carmack%20(Keen%20Technologies)_%20Research%20Directions%20at%20Upper%20Bound%202025.html",{loader:()=>n.e(5189).then(n.bind(n,5166)),meta:{date:1751722155e3,tag:["AI_GEN"],excerpt:"\n<p>以下是基于提供的文档，对约翰·卡马克（John Carmack）在上界（UpperBound）25会议上的演讲笔记进行详细的中文翻译总结，尽可能全面、清晰地呈现其职业背景、在Keen Technologies的研究工作、对强化学习（RL）和人工智能（AI）的看法，以及当前基于Atari游戏的研究项目。</p>\n<hr>\n<h3><strong>1. 职业背景概述</strong></h3>\n<p>约翰·卡马克作为科技领域的传奇人物，分享了他的职业历程，为当前的人工智能和强化学习工作提供背景：</p>\n<ul>\n<li>\n<p><strong>Id Software（1990年代）</strong>：作为创始人，卡马克开发了《指挥官基恩》（Commander Keen）、《德军总部3D》（Wolfenstein 3D）、《毁灭战士》（Doom）和《雷神之锤》（Quake）等经典游戏。他为《雷神之锤》推动GPU发展感到自豪，这间接促成了现代AI的兴起。DeepMind的DMLab环境也基于《雷神之锤竞技场》的优化版本。</p>\n</li>\n<li>\n<p><strong>Armadillo Aerospace</strong>：与Id Software工作重叠，卡马克花了十年时间研究垂直起降（VTVL）火箭，展现了他对前沿工程的兴趣。</p>\n</li>\n<li>\n<p><strong>Oculus / Meta</strong>：卡马克为现代虚拟现实（VR）奠定了技术基础，显著推动了如Oculus Quest等VR头显的发展。</p>\n</li>\n<li>\n<p><strong>Keen Technologies</strong>：在Meta工作期间，OpenAI创始人试图招募他。尽管他并非AI专家，他深入研究后认为AI是“我能从事的最重要的事情”。这标志着他从系统工程转向研究的重大转变，他对此乐在其中。他与强化学习领域的“教父”理查德·萨顿（Richard Sutton）合作，萨顿的教科书他读了两遍。两人观点高度一致，但也有健康的意见分歧。目前团队有六名研究人员，背景涵盖学术界和工业界。</p>\n</li>\n</ul>",readingTime:{minutes:15.9,words:4770},title:"John Carmack 在 Upper Bound 2025 上的演讲分享总结",type:"article"}}],["/posts/AI/MISC/%E6%96%B0%E7%9A%84Transformer%E6%A8%A1%E5%9E%8B%E9%80%82%E9%85%8D%E5%88%B0%E9%AB%98%E9%80%9A%E8%8A%AF%E7%89%87%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88.html",{loader:()=>n.e(6811).then(n.bind(n,1689)),meta:{date:1751800004e3,tag:["AI_GEN"],excerpt:"\n<p>Runner2011:意义：可能主要在汽车信息娱乐系统（Infotainment）和高级驾驶辅助系统（ADAS）场景中</p>\n<p>将一个新的Transformer模型适配到高通芯片（如Snapdragon芯片，包含Hexagon DSP、Adreno GPU和CPU）上，涉及软硬件结合<br>\n的多个步骤。以下是具体的工作内容，用直白的语言解释，并结合高通的汽车场景（ADAS、智能座舱等）以及你可能担任的程序员角色来描述：</p>\n<h3>适配Transformer模型到高通芯片的步骤</h3>\n<ol>\n<li>\n<p><strong>理解模型与芯片需求</strong></p>\n<ul>\n<li><strong>任务</strong>：分析新的Transformer模型（例如用于智能座舱的语音交互模型或ADAS的视觉Transformer）的结构和计算需求，确定其是否适合高通芯片的硬件特性。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>阅读模型的文档或代码（通常基于PyTorch或ONNX），了解其层结构（如自注意力机制、FFN层）和算子（如矩阵乘法、Softmax）。</li>\n<li>检查模型的计算量（FLOPs）、内存占用和输入/输出格式。</li>\n<li>确认高通芯片支持的算子和硬件加速能力，例如Hexagon DSP是否支持Transformer的矩阵运算，Adreno GPU是否适合并行计算。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：假设你拿到一个开源的语音Transformer模型（用于车内对话），你会检查它的参数量（例如100M参数）和对浮点运算的需求。</li>\n</ul>\n</li>\n<li>\n<p><strong>模型转换与导出</strong></p>\n<ul>\n<li><strong>任务</strong>：将Transformer模型从训练框架（如PyTorch）转换为高通芯片支持的格式（如ONNX或高通专用的QNN格式）。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>使用PyTorch的ONNX导出工具将模型转换为ONNX格式，确保所有算子（如Multi-Head Attention）都兼容。</li>\n<li>验证ONNX模型的正确性，使用ONNX Runtime运行推理，检查输出是否与原始模型一致。</li>\n<li>如果高通的QNN SDK需要特定格式，可能需要用高通工具进一步转换模型。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能发现Transformer中的LayerNorm算子在ONNX中不完全兼容，需要调整模型结构或替换算子。</li>\n</ul>\n</li>\n<li>\n<p><strong>模型量化</strong></p>\n<ul>\n<li><strong>任务</strong>：将Transformer模型量化为低精度格式（如从FP32到INT8），以适配高通芯片的低功耗需求，同时保持精度。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li><strong>训练后量化（PTQ）</strong>：使用高通的AIMET工具对模型进行量化，调整权重和激活值的量化范围，测试精度损失。</li>\n<li><strong>量化感知训练（QAT）</strong>：如果PTQ精度损失过大，可能需要重新训练模型，模拟量化效果（需要PyTorch支持）。</li>\n<li>分析量化后的精度（例如语音模型的词错误率或视觉模型的mAP），通过调整量化参数（如缩放因子）优化。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能发现Transformer的自注意力层在INT8量化后精度下降，需要微调量化参数或对特定层保持高精度（混合精度量化）。</li>\n</ul>\n</li>\n<li>\n<p><strong>优化模型以适配硬件</strong></p>\n<ul>\n<li><strong>任务</strong>：调整Transformer模型的计算流程，使其在高通芯片的Hexagon DSP或Adreno GPU上高效运行。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>优化算子实现：例如将矩阵乘法拆分成适合DSP的块运算，或者调整Softmax实现以适配GPU。</li>\n<li>减少内存占用：Transformer模型通常参数量大，可能需要模型剪枝（pruning）或知识蒸馏来降低参数量。</li>\n<li>使用高通的QNN SDK映射模型到硬件，分配计算任务到CPU、GPU或DSP。</li>\n<li>测试推理性能（延迟、吞吐量、功耗），调整模型结构或硬件调度策略。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能发现模型在Hexagon DSP上运行时内存带宽不足，需要压缩模型或优化数据流。</li>\n</ul>\n</li>\n<li>\n<p><strong>部署与测试</strong></p>\n<ul>\n<li><strong>任务</strong>：将优化后的Transformer模型部署到高通芯片上，在目标场景（如汽车ADAS或智能座舱）中测试其性能。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>使用高通的QNN SDK将模型编译为芯片可执行格式，部署到仿真环境或实际硬件（如开发板）。</li>\n<li>在汽车场景中测试，例如用ADAS的视觉Transformer检测道路目标，或用语音Transformer测试车内对话的响应速度。</li>\n<li>收集性能数据（延迟、功耗、精度），分析瓶颈（例如某层计算过慢）。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能在测试中发现语音Transformer在车内嘈杂环境下识别率下降，需要调整模型输入预处理或重新校准。</li>\n</ul>\n</li>\n<li>\n<p><strong>调试与问题修复</strong></p>\n<ul>\n<li><strong>任务</strong>：解决适配过程中出现的精度或性能问题。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>调试QNN SDK中的错误，例如模型在DSP上运行时崩溃，可能是算子未正确映射。</li>\n<li>分析精度问题，例如Transformer的注意力机制在量化后输出异常，需要检查权重分布或重新量化。</li>\n<li>与硬件团队沟通，确认芯片是否支持某些新型算子（如FlashAttention）。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能发现一个新算子在高通芯片上不支持，需要用C++实现一个自定义算子。</li>\n</ul>\n</li>\n<li>\n<p><strong>与全球团队协作</strong></p>\n<ul>\n<li><strong>任务</strong>：与高通全球团队（例如美国团队）合作，确保模型适配符合整体项目需求。</li>\n<li><strong>具体操作</strong>：\n<ul>\n<li>参加跨团队会议，讨论Transformer模型在新一代芯片上的支持需求。</li>\n<li>提供测试数据和优化建议，参与新硬件功能的验证。</li>\n<li>撰写技术报告，记录适配过程中的问题和解决方案。</li>\n</ul>\n</li>\n<li><strong>例子</strong>：你可能需要向美国团队反馈，某个Transformer模型在Hexagon DSP上的推理速度未达预期，建议优化DSP调度。</li>\n</ul>\n</li>\n</ol>",readingTime:{minutes:6.78,words:2035},title:"新的Transformer模型适配到高通芯片需要做什么",type:"article"}}],["/posts/Animation/%E6%B8%B8%E6%88%8F%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/placeholder.html",{loader:()=>n.e(4930).then(n.bind(n,2447)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Graphics/LearnOpenGL/placeholder.html",{loader:()=>n.e(2509).then(n.bind(n,6038)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Other/Math/placeholder.html",{loader:()=>n.e(5483).then(n.bind(n,4913)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Other/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/%E5%9C%A8%E5%8D%B3%E5%B0%86%E5%88%B0%E6%9D%A5%E7%9A%84AI%E6%97%B6%E4%BB%A3%EF%BC%8C%E6%80%8E%E4%B9%88%E5%81%9A%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B8%8D%E8%A2%ABAI%E6%B7%98%E6%B1%B0%E6%9B%BF%E4%BB%A3.html",{loader:()=>n.e(2728).then(n.bind(n,6671)),meta:{date:17515008e5,tag:["AI_GEN"],excerpt:"\n<p>runner2011: 两年前问chatgpt的第二次回答，第一次回答记录不在了。后面包括最近陆续又问了几次，感觉还是这版更好。</p>\n<hr>\n<p>Q:在即将到来的AI时代，怎么做让自己不被AI淘汰替代</p>\n<p>在未来的 AI 时代，要保持自己的价值和竞争力，可以考虑以下几点：<br>\n1.提高数字素养：学习使用数字工具和技术，以便在这个数字化的世界中获得更多机会。</p>\n<p>2.学习新技能：不断学习新技能和知识，以保持与时俱进，并为自己带来更多竞争力。</p>\n<p>3.发展人际技能：人工智能不能代替人类的情感和人际关系，因此，发展良好的人际技能将对您的职业生涯有益。</p>",readingTime:{minutes:1.27,words:382},title:"在即将到来的AI时代，怎么做让自己不被AI淘汰替代",type:"article"}}],["/posts/Other/%E6%B8%B8%E6%88%8F/placeholder.html",{loader:()=>n.e(7448).then(n.bind(n,411)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Programming/C_/placeholder.html",{loader:()=>n.e(5770).then(n.bind(n,4079)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Programming/C__/placeholder.html",{loader:()=>n.e(7737).then(n.bind(n,1589)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E4%BC%98%E5%8C%96/placeholder.html",{loader:()=>n.e(3936).then(n.bind(n,8667)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/Map(%E6%98%A0%E5%B0%84)%E5%92%8CSet(%E9%9B%86%E5%90%88).html",{loader:()=>n.e(3003).then(n.bind(n,2090)),meta:{date:1749351682e3,tag:["AI_GEN"],excerpt:'\n<p>简单说：</p>\n<p>哈希表实现Map通过哈希函数将键（key）映射到一个哈希值（通常是数组索引），在对应索引位置存储键值对（key-value pair）。如果发生哈希冲突（多个键映射到同一索引），通常通过链表或红黑树（Java 8+）解决。</p>\n<p>哈希表实现 Set 的方式类似 Map，但只存储元素（相当于 Map 的键），没有值（value）</p>\n<hr>\n<p>在数据结构中，Map 和 Set 是两种常见的高级数据结构，通常用于存储和操作数据。以下是它们的主要区别，用简洁的方式说明：</p>\n<p>1. 定义</p>\n<ul>\n<li>\n<p>Map：键值对（key-value pair）的集合，键是唯一的，值可以重复。用于存储键到值的映射关系。</p>\n<ul>\n<li>示例：{"name": "Alice", "age": 25}，键是 "name" 和 "age"，值是 "Alice" 和 25。</li>\n</ul>\n</li>\n<li>\n<p>Set：唯一元素的集合，无键值对概念，元素不可重复。</p>\n<ul>\n<li>示例：{1, 2, 3}，每个元素只出现一次。</li>\n</ul>\n</li>\n</ul>',readingTime:{minutes:7.66,words:2298},title:"Map(映射)和Set(集合)",type:"article"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%EF%BC%8C%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.html",{loader:()=>n.e(4787).then(n.bind(n,5594)),meta:{date:1749351682e3,tag:["AI_GEN"],excerpt:"\n<p>哈夫曼编码：熵编码</p>\n<h1>前情：</h1>\n<p>熵：有序，熵低，无序，熵高。熵低，信息量更少，更容易表示，熵高，信息量高，更难表示。</p>\n<h1>核心：</h1>\n<p>1.计算熵（计算高频，低频）。高频，用短编码表示，低频，长编码表示。</p>\n<p>2.根据熵信息，编码。</p>\n<h1>TODO</h1>\n<h2>哈夫曼树生成规则？</h2>\n",readingTime:{minutes:.32,words:96},title:"哈夫曼树，哈夫曼编码",type:"article"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E5%A0%86.html",{loader:()=>n.e(2945).then(n.bind(n,5801)),meta:{date:1749351682e3,tag:["AI_GEN"],excerpt:"\n<p>Q:所以不管什么堆，一定要满足的性质是什么？</p>\n<p>不管是什么类型的堆（如二叉堆、d-堆、斐波那契堆等），都必须满足的核心性质是堆性质（Heap Property）。具体来说：</p>\n<ol>\n<li>\n<p>最大堆（Max-Heap）：</p>\n<ul>\n<li>每个父节点的值大于或等于其子节点的值。</li>\n</ul>\n</li>\n<li>\n<p>最小堆（Min-Heap）：</p>\n<ul>\n<li>每个父节点的值小于或等于其子节点的值。</li>\n</ul>\n</li>\n</ol>\n<p>关键点</p>\n<ul>\n<li>堆性质是堆的定义核心，确保堆可以高效地维护和访问最大值（最大堆）或最小值（最小堆），通常通过根节点直接获取（O(1) 时间）。</li>\n<li>无论堆的结构如何（完全二叉树、d-叉树、还是斐波那契堆的树集合），堆性质必须在所有父子节点关系中成立。</li>\n<li>不同类型的堆（如二叉堆、d-堆、斐波那契堆）在结构（如是否为完全二叉树）和操作效率（如插入、删除、减少键值）上有所不同，但堆性质是通用的。</li>\n</ul>",readingTime:{minutes:1.36,words:409},title:"堆",type:"article"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20(ADT).html",{loader:()=>n.e(9566).then(n.bind(n,3378)),meta:{date:1749351682e3,tag:["AI_GEN"],excerpt:"\n<p>Q:抽象数据结构有哪些？</p>\n<p>A （runner2011):简言之，数据结构课程学的数据结构都是ADT. 只是也教了具体实现。</p>\n<p>好问题！我们来认真梳理一下常见的<strong>抽象数据结构（Abstract Data Types）</strong>。它们是程序设计中用来组织、管理和存储数据的方式，和具体实现（比如数组、链表、哈希表、红黑树）相对，抽象数据结构强调<strong>对数据和操作的抽象定义</strong>，不关心底层实现细节。</p>\n<hr>\n<h2>📚 常见抽象数据结构分类</h2>\n<h3>📦 线性结构</h3>\n<p>数据元素之间是<strong>一对一线性关系</strong></p>",readingTime:{minutes:4.14,words:1241},title:"抽象数据结构 (ADT)",type:"article"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html",{loader:()=>n.e(5363).then(n.bind(n,1196)),meta:{date:1749351682e3,tag:["AI_GEN"],excerpt:'\n<ul>\n<li><strong>贪心算法</strong>：像一个人爬山，每次都选最陡的路，可能错过真正的顶峰。</li>\n<li><strong>动态规划</strong>：像一群人分头探索所有路径，最后汇总最优路线</li>\n</ul>\n<p>动态规划：计算每一个子问题，并记录子问题的结果</p>\n<p>贪心算法：每次取最解决的结果，一条路走到黑</p>\n<h1>性能</h1>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">维度</th>\n<th style="text-align:left">贪心算法</th>\n<th style="text-align:left">动态规划</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left"><strong>时间效率</strong></td>\n<td style="text-align:left">快（<code>O(amount)</code>）</td>\n<td style="text-align:left">慢（<code>O(amount × coin_types)</code>）</td>\n</tr>\n<tr>\n<td style="text-align:left"><strong>空间效率</strong></td>\n<td style="text-align:left">低（<code>O(1)</code>）</td>\n<td style="text-align:left">高（<code>O(amount)</code>）</td>\n</tr>\n<tr>\n<td style="text-align:left"><strong>解的质量</strong></td>\n<td style="text-align:left">可能非最优（如&nbsp;<code>4,1,1</code>）</td>\n<td style="text-align:left">保证最优（如&nbsp;<code>3,3</code>）</td>\n</tr>\n<tr>\n<td style="text-align:left"><strong>适用场景</strong></td>\n<td style="text-align:left">问题满足贪心性质时</td>\n<td style="text-align:left">通用性强，但需要更多计算</td>\n</tr>\n</tbody>\n</table>',readingTime:{minutes:.6,words:179},title:"贪心算法，动态规划",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision_Overlap/placeholder.html",{loader:()=>n.e(2479).then(n.bind(n,2709)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/Compiling%20UnrealEngine%20Project%20by%20Command.html",{loader:()=>n.e(8008).then(n.bind(n,2785)),meta:{date:17493408e5,tag:["English"],excerpt:'\n<p>I found sometimes I just want to tune a little code. Open full solution file of Visual studio is annoying. If you\'re same, you can use below command to compile unreal project code:</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">UnrealBuildTool.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> YourProjectName</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BuildConfig</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -project=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"[Path]\\YourProjectName.uproject"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:.42,words:125},title:"Compiling UnrealEngine Project by Command",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/UnrealEngine%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E5%BC%95%E7%94%A8%E8%BF%98%E6%98%AF%E6%8B%B7%E8%B4%9D.html",{loader:()=>n.e(6538).then(n.bind(n,6021)),meta:{date:17509824e5,tag:["AI_GEN"],excerpt:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>:class SMyCustomWidget : public SCompoundWidget</span></span>\n<span class="line"><span>{ </span></span>\n<span class="line"><span>    public: </span></span>\n<span class="line"><span>    void Construct(const FArguments&amp; InArgs) </span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        // ...</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.88,words:2363},title:"UnrealEngine中结构体作为参数传引用还是拷贝",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MassEntity/placeholder.html",{loader:()=>n.e(3700).then(n.bind(n,2005)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Memory/placeholder.html",{loader:()=>n.e(964).then(n.bind(n,7979)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Networking/placeholder.html",{loader:()=>n.e(9309).then(n.bind(n,7802)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/TextureStreaming/placeholder.html",{loader:()=>n.e(1602).then(n.bind(n,6366)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Gameplay/GameplayAbilitySystem/placeholder.html",{loader:()=>n.e(1947).then(n.bind(n,7764)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/Slate/Slate%E5%8E%9F%E7%90%86.html",{loader:()=>n.e(3806).then(n.bind(n,3884)),meta:{date:17509824e5,tag:["AI_GEN"],excerpt:'\n<h2>概览</h2>\n<p><strong>Slate</strong>&nbsp;是完全自定义、与平台无关的用户界面框架，旨在让工具和应用程序（比如虚幻编辑器）的用户界面或游戏中用户界面的构建过程变得有趣、高效。它将声明性语法与轻松设计、布局和风格组件的功能相结合，允许在UI上轻松实现创建和迭代。</p>\n<p>Unreal官方文档：<a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/slate-user-interface-programming-framework-for-unreal-engine</a> 是比较好的了解Slate原理的入门第一篇文章</p>',readingTime:{minutes:5.47,words:1641},title:"Slate原理",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/Level%20Streaming/placeholder.html",{loader:()=>n.e(2698).then(n.bind(n,1534)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Composition/placeholder.html",{loader:()=>n.e(662).then(n.bind(n,3025)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Partition/placeholder.html",{loader:()=>n.e(566).then(n.bind(n,4975)),meta:{date:1749318588e3,tag:["AI_GEN"],excerpt:"\n",readingTime:{minutes:.01,words:3},title:"Placeholder",type:"article"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,2085)),meta:{title:""}}],["/Resources/",{loader:()=>n.e(5300).then(n.bind(n,6915)),meta:{title:"Resources"}}],["/posts/Game%20AI/",{loader:()=>n.e(9077).then(n.bind(n,1802)),meta:{title:"Game AI"}}],["/posts/",{loader:()=>n.e(8666).then(n.bind(n,6467)),meta:{title:"Posts"}}],["/posts/Gameplay/",{loader:()=>n.e(1495).then(n.bind(n,5527)),meta:{title:"Gameplay"}}],["/posts/Math/",{loader:()=>n.e(7029).then(n.bind(n,9341)),meta:{title:"Math"}}],["/posts/runner2011/",{loader:()=>n.e(9321).then(n.bind(n,7270)),meta:{title:"Runner2011"}}],["/posts/%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/",{loader:()=>n.e(6558).then(n.bind(n,9216)),meta:{title:"科学基础"}}],["/posts/AI/AI%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/",{loader:()=>n.e(8484).then(n.bind(n,4736)),meta:{title:"AI概念入门"}}],["/posts/AI/",{loader:()=>n.e(5029).then(n.bind(n,1693)),meta:{title:"AI"}}],["/posts/AI/MISC/",{loader:()=>n.e(9474).then(n.bind(n,5909)),meta:{title:"MISC"}}],["/posts/Animation/%E6%B8%B8%E6%88%8F%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/",{loader:()=>n.e(9943).then(n.bind(n,5066)),meta:{title:"游戏动画技术学习"}}],["/posts/Animation/",{loader:()=>n.e(5903).then(n.bind(n,468)),meta:{title:"Animation"}}],["/posts/Graphics/LearnOpenGL/",{loader:()=>n.e(1080).then(n.bind(n,4869)),meta:{title:"Learn Open GL"}}],["/posts/Graphics/",{loader:()=>n.e(2).then(n.bind(n,2452)),meta:{title:"Graphics"}}],["/posts/Other/Math/",{loader:()=>n.e(3654).then(n.bind(n,5281)),meta:{title:"Math"}}],["/posts/Other/",{loader:()=>n.e(8519).then(n.bind(n,3496)),meta:{title:"Other"}}],["/posts/Other/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/",{loader:()=>n.e(3875).then(n.bind(n,5498)),meta:{title:"工作生活"}}],["/posts/Other/%E6%B8%B8%E6%88%8F/",{loader:()=>n.e(4277).then(n.bind(n,106)),meta:{title:"游戏"}}],["/posts/Programming/C_/",{loader:()=>n.e(4671).then(n.bind(n,5576)),meta:{title:"C"}}],["/posts/Programming/",{loader:()=>n.e(5628).then(n.bind(n,4688)),meta:{title:"Programming"}}],["/posts/Programming/C__/",{loader:()=>n.e(7532).then(n.bind(n,503)),meta:{title:"C"}}],["/posts/Unreal%20Engine/%E4%BC%98%E5%8C%96/",{loader:()=>n.e(3725).then(n.bind(n,5243)),meta:{title:"优化"}}],["/posts/Unreal%20Engine/",{loader:()=>n.e(8606).then(n.bind(n,3136)),meta:{title:"Unreal Engine"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/",{loader:()=>n.e(4055).then(n.bind(n,2166)),meta:{title:"数据结构算法"}}],["/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{loader:()=>n.e(5353).then(n.bind(n,4703)),meta:{title:"计算机基础"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Collision_Overlap/",{loader:()=>n.e(402).then(n.bind(n,2122)),meta:{title:"Collision Overlap"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/",{loader:()=>n.e(2453).then(n.bind(n,5154)),meta:{title:"学习"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MISC/",{loader:()=>n.e(1218).then(n.bind(n,1745)),meta:{title:"MISC"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/MassEntity/",{loader:()=>n.e(6601).then(n.bind(n,6701)),meta:{title:"Mass Entity"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Memory/",{loader:()=>n.e(969).then(n.bind(n,4768)),meta:{title:"Memory"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Networking/",{loader:()=>n.e(5496).then(n.bind(n,2182)),meta:{title:"Networking"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/TextureStreaming/",{loader:()=>n.e(6711).then(n.bind(n,1616)),meta:{title:"Texture Streaming"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Gameplay/GameplayAbilitySystem/",{loader:()=>n.e(6070).then(n.bind(n,5770)),meta:{title:"Gameplay Ability System"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/Gameplay/",{loader:()=>n.e(4942).then(n.bind(n,4161)),meta:{title:"Gameplay"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/Slate/",{loader:()=>n.e(6938).then(n.bind(n,2450)),meta:{title:"Slate"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/UI/",{loader:()=>n.e(1936).then(n.bind(n,1423)),meta:{title:"UI"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/Level%20Streaming/",{loader:()=>n.e(2751).then(n.bind(n,2220)),meta:{title:"Level Streaming"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/",{loader:()=>n.e(8566).then(n.bind(n,4279)),meta:{title:"World Building"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Composition/",{loader:()=>n.e(3891).then(n.bind(n,4750)),meta:{title:"World Composition"}}],["/posts/Unreal%20Engine/%E5%AD%A6%E4%B9%A0/WorldBuilding/World%20Partition/",{loader:()=>n.e(6499).then(n.bind(n,3356)),meta:{title:"World Partition"}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,1678)),meta:{title:"分类",index:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,3706)),meta:{title:"标签",index:!1}}],["/tag/ai-gen/",{loader:()=>n.e(6539).then(n.bind(n,9559)),meta:{title:"标签: AI_GEN",index:!1}}],["/tag/math/",{loader:()=>n.e(980).then(n.bind(n,718)),meta:{title:"标签: Math",index:!1}}],["/tag/stars/",{loader:()=>n.e(9115).then(n.bind(n,3202)),meta:{title:"标签: stars",index:!1}}],["/tag/ai/",{loader:()=>n.e(5268).then(n.bind(n,5918)),meta:{title:"标签: AI",index:!1}}],["/tag/english/",{loader:()=>n.e(2778).then(n.bind(n,5908)),meta:{title:"标签: English",index:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,9646)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,5725)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,549)),meta:{title:"时间轴",index:!1}}]])},8761:(e,t,n)=>{n.d(t,{U:()=>l});const l=JSON.parse('{"base":"/","lang":"zh-CN","title":"Runner2011 blog","description":"Runner2011的 blog","head":[],"locales":{}}')}},e=>{e.O(0,[5397,9937],()=>e(e.s=8483)),e.O()}]);