"use strict";(self.webpackChunkrunn2011blog=self.webpackChunkrunn2011blog||[]).push([[5955],{628:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},6370:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(8178);const e={},t=(0,a(628).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="头文件保护机制" tabindex="-1"><a class="header-anchor" href="#头文件保护机制"><span>头文件保护机制</span></a></h1><h2 id="q-举例-如果不写头文件保护-可能有什么问题" tabindex="-1"><a class="header-anchor" href="#q-举例-如果不写头文件保护-可能有什么问题"><span>Q:举例，如果不写头文件保护，可能有什么问题</span></a></h2><p>可能会遇到重复定义问题。<br> 比如foo.cpp和bar.cpp都include foo.h. 如果头文件只有函数声明，编译器不会报错。如果有函数定义，或全局变量，就会触发重复定义报错。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// foo.h</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printfoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //It&#39; ok. 如果只是函数声明，没问题，编译器运行重复声明。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> g_foo;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // error. 全局变量，触发重复定义报错</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printbar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bar </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl; }</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // error. 会触发重复定义报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-写了头文件保护就万全了吗" tabindex="-1"><a class="header-anchor" href="#q-写了头文件保护就万全了吗"><span>Q:写了头文件保护就万全了吗？</span></a></h2><p>不是。</p><h2 id="只能保护编译阶段重复定义" tabindex="-1"><a class="header-anchor" href="#只能保护编译阶段重复定义"><span>只能保护编译阶段重复定义</span></a></h2><h2 id="✅-举个经典例子说明" tabindex="-1"><a class="header-anchor" href="#✅-举个经典例子说明"><span>✅ 举个经典例子说明：</span></a></h2><h3 id="🚫-没有头文件保护会怎样" tabindex="-1"><a class="header-anchor" href="#🚫-没有头文件保护会怎样"><span>🚫 没有头文件保护会怎样？</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// B.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 第二次包含！</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;B.h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="💥-编译器报错" tabindex="-1"><a class="header-anchor" href="#💥-编译器报错"><span>💥 编译器报错：</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>error: redefinition of &#39;struct A&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因为编译器看到 <code>main.cpp</code> 中通过 <code>B.h</code> 两次包含了 <code>A.h</code>，于是认为你重复定义了 <code>A</code> 两次。</p><hr><h2 id="✅-用-pragma-once-就不会有问题" tabindex="-1"><a class="header-anchor" href="#✅-用-pragma-once-就不会有问题"><span>✅ 用 <code>#pragma once</code> 就不会有问题</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#pragma once</code> 会告诉编译器：</p><blockquote><p>“在同一个翻译单元（.cpp 编译文件）中，这个头文件只展开一次。”</p></blockquote><p>所以哪怕你这样写：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也只会生效一次，剩下的忽略，不会重复定义 <code>struct A</code>。</p><hr><h2 id="✅-对比-编译错误-vs-链接错误" tabindex="-1"><a class="header-anchor" href="#✅-对比-编译错误-vs-链接错误"><span>✅ 对比：编译错误 vs 链接错误</span></a></h2><table><thead><tr><th>错误类型</th><th>原因</th><th>举例</th><th><code>#pragma once</code> 是否能防止</th></tr></thead><tbody><tr><td>✅ 编译错误</td><td>同一个 <code>.cpp</code> 中重复包含头文件</td><td><code>#include &quot;A.h&quot;</code> 两次 → 结构体重复定义</td><td>✅ 能防</td></tr><tr><td>❌ 链接错误</td><td>不同 <code>.cpp</code> 都包含了同一个头文件中定义的函数</td><td><code>DFS.cpp</code>, <code>main.cpp</code> 都 include <code>DFS.h</code>，且 <code>DFS.h</code> 有函数定义</td><td>❌ 不能防</td></tr></tbody></table><hr><h2 id="✅-所以总结一下" tabindex="-1"><a class="header-anchor" href="#✅-所以总结一下"><span>✅ 所以总结一下：</span></a></h2><table><thead><tr><th>功能</th><th><code>#pragma once</code> 作用</th></tr></thead><tbody><tr><td>防止重复 include</td><td>✅ 在同一个 <code>.cpp</code> 文件中只展开一次头文件内容</td></tr><tr><td>避免重复定义 struct/class</td><td>✅ 有效</td></tr><tr><td>避免重复定义函数（链接时）</td><td>❌ 无效（需要 <code>inline</code> 或拆分 .cpp）</td></tr><tr><td>提升可读性 / 简化条件编译宏</td><td>✅ 推荐代替 <code>#ifndef</code> 宏保护</td></tr></tbody></table><hr><h2 id="链接阶段重复定义不能避免" tabindex="-1"><a class="header-anchor" href="#链接阶段重复定义不能避免"><span>链接阶段重复定义不能避免</span></a></h2><blockquote><p>⚠️ <strong>即使你写了头文件保护，比如 <code>#pragma once</code> 或 <code>#ifndef</code>，如果你在头文件里写了 <code>void DFS() { ... }</code> 这样非 <code>inline</code> 的函数定义，</strong><br> ❗ <strong>多个 <code>.cpp</code> 文件包含它时，依然会在链接阶段报“重复定义”错误。</strong></p></blockquote><hr><h2 id="🧠-为什么会这样" tabindex="-1"><a class="header-anchor" href="#🧠-为什么会这样"><span>🧠 为什么会这样？</span></a></h2><p>头文件保护（<code>#pragma once</code> 或 <code>#ifndef</code>）的作用只是：</p><blockquote><p>✅ <strong>防止同一个 <code>.cpp</code> 文件中重复展开头文件内容（避免编译错误）</strong></p></blockquote><p>但它<strong>并不会阻止</strong>头文件内容在<strong>多个 <code>.cpp</code> 编译单元中分别展开一次</strong>！</p><hr><h3 id="📦-举个例子" tabindex="-1"><a class="header-anchor" href="#📦-举个例子"><span>📦 举个例子：</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 这里是函数定义（不是声明）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="然后你在两个源文件中都-include" tabindex="-1"><a class="header-anchor" href="#然后你在两个源文件中都-include"><span>然后你在两个源文件中都 include：</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// test.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DFS.h&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拷贝 DFS() 实现进来</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DFS.h&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 又拷贝了一次 DFS() 实现</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 <code>.cpp</code> 会单独编译成一个 <code>.o</code> 文件，分别都生成一个名为 <code>DFS</code> 的函数符号。</p><blockquote><p>💥 链接器看到有两个 <code>DFS</code> 定义，抛出 <code>multiple definition of &#39;DFS&#39;</code> 错误。</p></blockquote><hr><h2 id="✅-那怎么办-有哪些解决方案" tabindex="-1"><a class="header-anchor" href="#✅-那怎么办-有哪些解决方案"><span>✅ 那怎么办？有哪些解决方案？</span></a></h2><table><thead><tr><th>方法</th><th>原理</th><th>写法示例</th><th>推荐度</th></tr></thead><tbody><tr><td>✅ 把函数定义移到 <code>.cpp</code> 中</td><td>只留声明在 <code>.h</code></td><td><code>void DFS();</code> → <code>.cpp</code> 中实现</td><td>⭐⭐⭐⭐</td></tr><tr><td>✅ 使用 <code>inline</code></td><td>链接器允许多个 TU 定义</td><td><code>inline void DFS() { ... }</code></td><td>⭐⭐⭐</td></tr><tr><td>✅ 使用 <code>static</code></td><td>每个 TU 都生成独立副本</td><td><code>static void DFS() { ... }</code></td><td>⭐⭐（工具函数可用）</td></tr><tr><td>❌ 什么都不加直接定义</td><td>多个 TU 生成相同符号</td><td>会链接失败</td><td>🚫 不推荐</td></tr></tbody></table><hr><h2 id="✅-正确示范" tabindex="-1"><a class="header-anchor" href="#✅-正确示范"><span>✅ 正确示范：</span></a></h2><h3 id="✔️-推荐方案-只声明在头文件-定义放-cpp" tabindex="-1"><a class="header-anchor" href="#✔️-推荐方案-只声明在头文件-定义放-cpp"><span>✔️ 推荐方案：只声明在头文件，定义放 .cpp</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 只声明</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DFS.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现体</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✔️-可选方案-c-17-用-inline" tabindex="-1"><a class="header-anchor" href="#✔️-可选方案-c-17-用-inline"><span>✔️ 可选方案（C++17+）：用 <code>inline</code></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现体</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适用于：</p><ul><li>轻量函数（比如工具函数）</li><li>定义写在模板类中</li><li>不想拆 .h/.cpp 文件的小项目</li></ul><hr><h2 id="✅-总结判断逻辑" tabindex="-1"><a class="header-anchor" href="#✅-总结判断逻辑"><span>✅ 总结判断逻辑</span></a></h2><table><thead><tr><th>你写在头文件的内容</th><th>多个 .cpp 引用时是否安全？</th><th>原因</th></tr></thead><tbody><tr><td>函数声明 <code>void foo();</code></td><td>✅ 安全</td><td>不生成符号</td></tr><tr><td>函数定义 <code>void foo() {}</code></td><td>❌ 不安全</td><td>多重定义</td></tr><tr><td><code>inline void foo() {}</code></td><td>✅ 安全</td><td>链接器接受多个定义</td></tr><tr><td><code>static void foo() {}</code></td><td>✅ 安全</td><td>每个 TU 独立副本</td></tr><tr><td>类定义 <code>class Foo {};</code></td><td>✅ 安全</td><td>仅结构声明，不生成符号</td></tr><tr><td><code>extern int x;</code> + <code>.cpp</code> 定义</td><td>✅ 安全</td><td>正确分离声明与定义</td></tr></tbody></table><hr><h2 id="q-inline如何解决编译重复定义" tabindex="-1"><a class="header-anchor" href="#q-inline如何解决编译重复定义"><span>Q:inline如何解决编译重复定义？</span></a></h2><p>非常好，你这个问题涉及 C++ 编译与链接的核心机制。</p><hr><h2 id="✅-一句话核心解释" tabindex="-1"><a class="header-anchor" href="#✅-一句话核心解释"><span>✅ 一句话核心解释：</span></a></h2><blockquote><p><code>inline</code> 函数允许在多个 <code>.cpp</code> 文件中<strong>重复定义</strong>，<strong>但链接器不会报“重复定义”错误</strong>，因为标准规定：<br> ✅ “<strong>多个 translation unit（编译单元）中重复定义相同 <code>inline</code> 函数是合法的</strong>，链接器必须合并它们。”</p></blockquote><hr><h2 id="🧠-先回顾为什么普通函数不能重复定义" tabindex="-1"><a class="header-anchor" href="#🧠-先回顾为什么普通函数不能重复定义"><span>🧠 先回顾为什么普通函数不能重复定义？</span></a></h2><h3 id="⚠️-普通函数定义-没有-inline" tabindex="-1"><a class="header-anchor" href="#⚠️-普通函数定义-没有-inline"><span>⚠️ 普通函数定义（没有 <code>inline</code>）：</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // do something</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你如果在两个 <code>.cpp</code> 文件都 <code>#include &quot;DFS.h&quot;</code>，那么就会生成两个 <code>DFS()</code> 的实体定义 → 链接时报：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>multiple definition of &#39;DFS()&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="✅-加了-inline-之后-行为就变了" tabindex="-1"><a class="header-anchor" href="#✅-加了-inline-之后-行为就变了"><span>✅ 加了 <code>inline</code> 之后，行为就变了：</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DFS.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // do something</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使多个 <code>.cpp</code> 都包含了这个头文件，每个编译单元都生成一个 <code>DFS()</code> 的定义，但链接器<strong>被标准允许合并它们为同一个函数</strong>，所以不会报错。</p><p>这就是 C++ 中所谓的：</p><blockquote><p>✅ “<strong>一个程序中，inline 函数可以有多个 identical definitions</strong>”</p></blockquote><hr><h2 id="📘-来自-c-标准的说明-简化理解" tabindex="-1"><a class="header-anchor" href="#📘-来自-c-标准的说明-简化理解"><span>📘 来自 C++ 标准的说明（简化理解）</span></a></h2><h3 id="标准原文-c-17-§6-4-3" tabindex="-1"><a class="header-anchor" href="#标准原文-c-17-§6-4-3"><span>标准原文（C++17 §6.4.3）：</span></a></h3><blockquote><p>If a function is declared <code>inline</code>, then it must be defined in every translation unit where it is used, and the definitions <strong>must be identical</strong>.<br> The compiler/linker must treat them as <strong>a single definition</strong> (not multiple).</p></blockquote><hr><h2 id="🧪-实验示意" tabindex="-1"><a class="header-anchor" href="#🧪-实验示意"><span>🧪 实验示意</span></a></h2><h3 id="✅-有-inline-不会报错" tabindex="-1"><a class="header-anchor" href="#✅-有-inline-不会报错"><span>✅ 有 <code>inline</code> 不会报错：</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// utils.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hi</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;utils.h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// other.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;utils.h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="❌-没有-inline-会报错" tabindex="-1"><a class="header-anchor" href="#❌-没有-inline-会报错"><span>❌ 没有 <code>inline</code> 会报错：</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// utils.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hi</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个 <code>.cpp</code> 都包含这个，会生成两个函数体 → 链接时报错。</p><hr><h2 id="✅-总结-为什么-inline-能避免重复定义" tabindex="-1"><a class="header-anchor" href="#✅-总结-为什么-inline-能避免重复定义"><span>✅ 总结：为什么 <code>inline</code> 能避免重复定义？</span></a></h2><table><thead><tr><th>特性</th><th>原因</th></tr></thead><tbody><tr><td><strong>允许多个定义</strong></td><td>标准规定 inline 函数可以在多个 <code>.cpp</code> 中重复定义</td></tr><tr><td><strong>不算重复符号</strong></td><td>链接器合并为一个函数符号</td></tr><tr><td><strong>适合头文件定义</strong></td><td>可放在 <code>.h</code> 文件中直接实现</td></tr><tr><td><strong>优化调用开销（原义）</strong></td><td>原始用途是建议编译器做“内联展开”优化（现代编译器不再依赖这个）</td></tr></tbody></table><hr><h3 id="✅-实用建议" tabindex="-1"><a class="header-anchor" href="#✅-实用建议"><span>✅ 实用建议</span></a></h3><table><thead><tr><th>用法场景</th><th>是否建议用 inline</th></tr></thead><tbody><tr><td>工具函数 / 很短的小函数</td><td>✅ 推荐 inline</td></tr><tr><td>模板函数（必须 header 实现）</td><td>✅ 自动 inline</td></tr><tr><td>普通函数（有清晰分工）</td><td>❌ 不建议 inline，放 .cpp 更好</td></tr><tr><td>成员函数定义在类中</td><td>✅ 隐式 inline，不需要再写 inline 关键词</td></tr></tbody></table><hr><h2 id="🔍-补充-inline-不等于-一定内联" tabindex="-1"><a class="header-anchor" href="#🔍-补充-inline-不等于-一定内联"><span>🔍 补充：inline 不等于“一定内联”</span></a></h2><ul><li><code>inline</code> 的作用是：允许多定义、避免链接冲突；</li><li>是否真正<strong>展开成无函数调用的内联代码</strong>，由编译器优化器决定；</li><li>所以现代含义的 <code>inline</code> 更像是 <strong>“允许放在头文件定义的函数”</strong>。</li></ul><hr><h2 id="q-inline的重复定义内容不一致-怎么办" tabindex="-1"><a class="header-anchor" href="#q-inline的重复定义内容不一致-怎么办"><span>Q:inline的重复定义内容不一致，怎么办</span></a></h2><p>这涉及了 C++ 编译模型中 <strong>One Definition Rule（ODR）</strong> 的高级话题。</p><hr><h2 id="✅-问题复述" tabindex="-1"><a class="header-anchor" href="#✅-问题复述"><span>✅ 问题复述：</span></a></h2><blockquote><p>两个不同的头文件里都定义了一个同名 <code>inline</code> 函数 <code>foofunc()</code>，但函数体内容不同。多个 <code>.cpp</code> 分别包含了这两个头文件。<br> 会发生什么？</p></blockquote><hr><h2 id="❗结论" tabindex="-1"><a class="header-anchor" href="#❗结论"><span>❗结论：</span></a></h2><blockquote><p>💥 <strong>这是违反 C++ 的 One Definition Rule (ODR)</strong><br> 编译器可能不会报错，但<strong>链接器行为未定义（Undefined Behavior）</strong>，有时会悄悄通过，有时会产生神秘 bug。</p></blockquote><hr><h2 id="📘-c-标准中的规定-简化版" tabindex="-1"><a class="header-anchor" href="#📘-c-标准中的规定-简化版"><span>📘 C++ 标准中的规定（简化版）：</span></a></h2><blockquote><p>如果一个 <code>inline</code> 函数在多个 translation unit 中出现多个定义，它们的函数体必须 <strong>完全相同（identical）</strong>，否则行为是 undefined。</p></blockquote><p>出处（C++17 §6.4.3.4）：</p><blockquote><p>&quot;If the definition of a function appears in more than one translation unit, then <strong>each definition shall be identical</strong>, otherwise the behavior is undefined.&quot;</p></blockquote><hr><h2 id="🧪-举例说明" tabindex="-1"><a class="header-anchor" href="#🧪-举例说明"><span>🧪 举例说明：</span></a></h2><h3 id="✅-例子-两个头文件中定义了不同的-inline-函数" tabindex="-1"><a class="header-anchor" href="#✅-例子-两个头文件中定义了不同的-inline-函数"><span>✅ 例子：两个头文件中定义了不同的 <code>inline</code> 函数</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foofunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;From A</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// B.h</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foofunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;From B</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    foofunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 输出？</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// other.cpp</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;B.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    foofunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 输出？</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔧-编译通过-但结果是未定义行为" tabindex="-1"><a class="header-anchor" href="#🔧-编译通过-但结果是未定义行为"><span>🔧 编译通过，但结果是<strong>未定义行为</strong>！</span></a></h3><ul><li>链接器会合并多个 <code>foofunc()</code>，但到底保留的是哪个版本 → 不确定；</li><li>某些编译器可能保留 <code>A.h</code> 的版本，有的可能是 <code>B.h</code>；</li><li>如果打开优化，可能某些 TU 使用了 A 版，某些用了 B 版 → 💥 混乱！</li></ul><hr><h2 id="⚠️-更严重的情况-静态库或模板库" tabindex="-1"><a class="header-anchor" href="#⚠️-更严重的情况-静态库或模板库"><span>⚠️ 更严重的情况：静态库或模板库</span></a></h2><p>这种冲突如果发生在：</p><ul><li>多个 <code>.lib</code> / <code>.a</code> 静态库之间；</li><li>模板函数中 <code>inline</code> 定义了不同内容；<br> 会造成：</li><li>链接器不报错；</li><li>程序运行期表现错乱，且极难调试。</li></ul><hr><h2 id="✅-如何避免这种冲突" tabindex="-1"><a class="header-anchor" href="#✅-如何避免这种冲突"><span>✅ 如何避免这种冲突？</span></a></h2><table><thead><tr><th>做法</th><th>说明</th></tr></thead><tbody><tr><td>✅ 不要在多个头文件中定义同名 <code>inline</code> 函数</td><td>最基本原则</td></tr><tr><td>✅ 使用命名空间隔离</td><td><code>namespace A { inline void foofunc(); }</code></td></tr><tr><td>✅ 只在一个 <code>.h</code> 中定义 <code>inline</code> 实现</td><td>避免 ODR 冲突</td></tr><tr><td>✅ 使用 <code>#include</code> 组合时小心头文件冲突</td><td>特别是第三方库</td></tr><tr><td>✅ 在大型项目中用模块/命名规则区分函数命名</td><td>例如 <code>Math_Foo()</code> vs <code>Render_Foo()</code></td></tr></tbody></table><hr><h2 id="🧠-总结" tabindex="-1"><a class="header-anchor" href="#🧠-总结"><span>🧠 总结</span></a></h2><table><thead><tr><th>问题</th><th>结论</th></tr></thead><tbody><tr><td>两个头文件中 <code>inline</code> 函数同名不同体</td><td>❌ 违反 One Definition Rule</td></tr><tr><td>是否总会报错</td><td>❌ 不一定，很多时候编译/链接都能通过</td></tr><tr><td>后果</td><td><strong>Undefined Behavior</strong>，程序行为不可预测</td></tr><tr><td>避免方式</td><td>避免命名冲突，统一函数定义位置，或用命名空间隔离</td></tr></tbody></table>',134)]))}]]),l=JSON.parse('{"path":"/posts/Programming/C__/C__%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6.html","title":"头文件保护机制","lang":"zh-CN","frontmatter":{"tag":["AI_GEN"],"description":"头文件保护机制 Q:举例，如果不写头文件保护，可能有什么问题 可能会遇到重复定义问题。 比如foo.cpp和bar.cpp都include foo.h. 如果头文件只有函数声明，编译器不会报错。如果有函数定义，或全局变量，就会触发重复定义报错。 Q:写了头文件保护就万全了吗？ 不是。 只能保护编译阶段重复定义 ✅ 举个经典例子说明： 🚫 没有头文件保...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"头文件保护机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-07T06:58:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Runner2011\\",\\"url\\":\\"https://runner2011.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://runner2011.github.io/posts/Programming/C__/C__%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Runner2011 blog"}],["meta",{"property":"og:title","content":"头文件保护机制"}],["meta",{"property":"og:description","content":"头文件保护机制 Q:举例，如果不写头文件保护，可能有什么问题 可能会遇到重复定义问题。 比如foo.cpp和bar.cpp都include foo.h. 如果头文件只有函数声明，编译器不会报错。如果有函数定义，或全局变量，就会触发重复定义报错。 Q:写了头文件保护就万全了吗？ 不是。 只能保护编译阶段重复定义 ✅ 举个经典例子说明： 🚫 没有头文件保..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-07T06:58:57.000Z"}],["meta",{"property":"article:tag","content":"AI_GEN"}],["meta",{"property":"article:modified_time","content":"2025-08-07T06:58:57.000Z"}]]},"git":{"createdTime":1754549937000,"updatedTime":1754549937000,"contributors":[{"name":"runner2011","username":"runner2011","email":"chenjfsea@gmail.com","commits":1,"url":"https://github.com/runner2011"}]},"readingTime":{"minutes":7.92,"words":2377},"filePathRelative":"posts/Programming/C++/C++头文件保护机制.md","excerpt":"\\n<h2>Q:举例，如果不写头文件保护，可能有什么问题</h2>\\n<p>可能会遇到重复定义问题。<br>\\n比如foo.cpp和bar.cpp都include foo.h. 如果头文件只有函数声明，编译器不会报错。如果有函数定义，或全局变量，就会触发重复定义报错。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-cpp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// foo.h</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> printfoo</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> //It\' ok. 如果只是函数声明，没问题，编译器运行重复声明。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> g_foo;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // error. 全局变量，触发重复定义报错</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> printbar</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\"> bar</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">){ std::cout </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> bar </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> std::endl; }</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // error. 会触发重复定义报错</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);